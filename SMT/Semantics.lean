import SMT.HOTyping
import Extra.ZFC_Extra

noncomputable section

namespace SMT
namespace SMTType

abbrev toZFSet : SMTType ‚Üí ZFSet
  | .bool => ZFSet.ùîπ
  | .int => ZFSet.Int
  | .unit => {‚àÖ}
  | .fun œÑ œÉ => (œÑ.toZFSet).funs œÉ.toZFSet
  | .option œÑ => ZFSet.Option.toZFSet œÑ.toZFSet
  | .pair Œ± Œ≤ => Œ±.toZFSet.prod Œ≤.toZFSet
notation:max "‚ü¶" z "‚üß·∂ª" => SMTType.toZFSet z

def default {ùí±} : SMTType ‚Üí PHOAS.Term ùí±
  | .int => .int 0
  | .bool => .bool false
  | .pair Œ± Œ≤ => .pair Œ±.default Œ≤.default
  | .option Œ± => .none Œ±
  | .¬´fun¬ª Œ± Œ≤ => @PHOAS.Term.lambda ùí± 1 (fun _ ‚Ü¶ Œ±) (fun _ ‚Ü¶ Œ≤.default)
  | .unit => .¬´()¬ª

def defaultZFSet.{u} : SMTType ‚Üí ZFSet.{u}
  | .int => ZFSet.ofInt 0
  | .bool => ZFSet.zffalse
  | .pair Œ± Œ≤ => Œ±.defaultZFSet.pair Œ≤.defaultZFSet
  | .option Œ± => (ZFSet.Option.none (S := Œ±.toZFSet)).1
  | .¬´fun¬ª Œ± Œ≤ => (Œ±.toZFSet.prod Œ≤.toZFSet).sep fun z ‚Ü¶ z.œÄ‚ÇÇ = Œ≤.defaultZFSet
  | .unit => ‚àÖ

theorem default_type_correct {ùí±} [DecidableEq ùí±] {Œì : PHOAS.TypeContext ùí±} (œÑ : SMTType) : Œì ‚ä¢ œÑ.default : œÑ := by
  induction œÑ generalizing Œì with
  | bool => apply PHOAS.Typing.bool
  | int => apply PHOAS.Typing.int
  | unit => apply PHOAS.Typing.¬´()¬ª
  | ¬´fun¬ª œÑ œÉ œÑ_ih œÉ_ih => apply PHOAS.Typing.lambda _ _ _ _ (fun _ ‚Ü¶ œÉ_ih) Nat.one_pos
  | option œÑ ih => apply PHOAS.Typing.none
  | pair Œ± Œ≤ Œ±_ih Œ≤_ih => apply PHOAS.Typing.pair _ _ _ _ _ Œ±_ih Œ≤_ih

theorem mem_toZFSet_of_defaultZFSet {Œ± : SMTType} : Œ±.defaultZFSet ‚àà Œ±.toZFSet := by
  induction Œ± with
  | bool => exact ZFSet.ZFBool.zffalse_mem_ùîπ
  | int => exact ZFSet.mem_ofInt_Int 0
  | unit => exact ZFSet.mem_singleton.mpr rfl
  | ¬´fun¬ª Œ± Œ≤ Œ±_ih Œ≤_ih =>
    rw [SMTType.defaultZFSet, SMTType.toZFSet, ZFSet.mem_funs]
    and_intros
    ¬∑ exact ZFSet.sep_subset_self
    ¬∑ intro x x_mem_Œ±
      exists Œ≤.defaultZFSet
      and_intros
      ¬∑ beta_reduce
        rw [ZFSet.mem_sep, ZFSet.pair_mem_prod, ZFSet.œÄ‚ÇÇ_pair, eq_self, and_true]
        exact ‚ü®x_mem_Œ±, Œ≤_ih‚ü©
      ¬∑ intro y hy
        rw [ZFSet.mem_sep, ZFSet.pair_mem_prod, ZFSet.œÄ‚ÇÇ_pair] at hy
        exact hy.2
  | option œÑ ih => exact SetLike.coe_mem ZFSet.Option.none
  | pair Œ± Œ≤ Œ±_ih Œ≤_ih =>
    rw [SMTType.defaultZFSet, SMTType.toZFSet, ZFSet.pair_mem_prod]
    and_intros <;> assumption

theorem toZFSet_nonempty {Œ± : SMTType} : Œ±.toZFSet ‚â† ‚àÖ := by
  induction Œ± with
  | bool =>
    rw [SMTType.toZFSet]
    exact ZFSet.ZFBool.ùîπ.nonempty
  | int =>
    rw [SMTType.toZFSet]
    exact ZFSet.Int.nonempty
  | unit =>
    rw [SMTType.toZFSet]
    intro contr
    rw [ZFSet.ext_iff] at contr
    simp only [ZFSet.mem_singleton, ZFSet.notMem_empty, iff_false, forall_eq] at contr
  | ¬´fun¬ª arg ret arg_ih ret_ih => exact ZFSet.funs.nonempty ret_ih
  | option œÑ ih =>
    rw [SMTType.toZFSet, ZFSet.Option.toZFSet]
    intro contr
    rw [ZFSet.ext_iff] at contr
    specialize contr <| ZFSet.pair ZFSet.ZFBool.false ‚àÖ
    simp at contr
  | pair Œ± Œ≤ Œ±_ih Œ≤_ih =>
    rw [SMTType.toZFSet]
    intro contr
    rw [ZFSet.ext_iff] at contr
    obtain ‚ü®a, ha‚ü© := ZFSet.nonempty_exists_iff.mp Œ±_ih
    obtain ‚ü®b, hb‚ü© := ZFSet.nonempty_exists_iff.mp Œ≤_ih
    specialize contr <| ZFSet.pair a b
    rw [ZFSet.pair_mem_prod] at contr
    nomatch ZFSet.notMem_empty (a.pair b) <| contr.mp ‚ü®ha, hb‚ü©

example {œÑ : SMTType} : ‚àÄ x : ZFSet.Option œÑ.toZFSet, x.1 ‚àà (SMTType.option œÑ).toZFSet := Œª ‚ü®_,h‚ü© => h
example {œÑ : SMTType} : ‚àÄ x ‚àà (SMTType.option œÑ).toZFSet, x ‚àà (ZFSet.prod ({‚ÜëZFSet.ZFBool.false} : ZFSet) {‚àÖ}) ‚à™ ({‚ÜëZFSet.ZFBool.true} : ZFSet).prod œÑ.toZFSet := Œª _ => id

end SMTType

section Semantics

set_option hygiene false
local notation "‚ü¶" t "‚üßÀ¢" => denote t

abbrev Dom := Œ£' (x : ZFSet) (œÑ : SMTType), x ‚àà œÑ.toZFSet
instance : Inhabited Dom := ‚ü®ZFSet.ofInt 0, .int, ZFSet.mem_ofInt_Int 0‚ü©

open Classical SMT.PHOAS in
def denote_distinct : List Dom ‚Üí ZFSet.ZFBool
  | [] => ‚ä§
  | x::xs =>
    let not_mem := ZFSet.ZFBool.ofBool <| decide <| x ‚àâ xs
    let dist := denote_distinct xs
    ‚ü®not_mem ‚ãÄ·∂ª dist, overloadBinOp_ùîπ_endo (fun _ _ ‚Ü¶ Subtype.property _)‚ü©

open Classical PHOAS in
def denote : PHOAS.Term Dom ‚Üí Option Dom
  | .var v => return v
  | .int n => return ‚ü®.ofInt n, .int, ZFSet.mem_ofInt_Int n‚ü©
  | .bool b => return ‚ü®ZFSet.ZFBool.ofBool b, .bool, ZFSet.ZFBool.mem_ofBool_ùîπ b‚ü©
  | .app f x => do
    let ‚ü®F, .fun œÉ œÑ, hF‚ü© ‚Üê ‚ü¶f‚üßÀ¢ | failure
    let ‚ü®X, œÉ', hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢
    if œÉ_eq_œÉ' : œÉ = œÉ' then
      if ispfun : F.IsPFunc œÉ.toZFSet œÑ.toZFSet then
        if X_dom : X ‚àà F.Dom then
          let ‚ü®Y, hY‚ü© := F.fapply ispfun ‚ü®X, X_dom‚ü©
          return ‚ü®Y, œÑ, hY‚ü©
        else failure
      else failure
    else failure
  | @SMT.PHOAS.Term.lambda _ n œÑs t => do
    if n_pos : n > 0 then
      if den_t_isSome : ‚àÄ {x : Fin n ‚Üí Dom}, (‚àÄ i, (x i).1 ‚àà (œÑs i).toZFSet) ‚Üí ‚ü¶t x‚üßÀ¢.isSome then
        if den_t_typ_det : ‚àÄ x y : Fin n ‚Üí Dom, (hx : ‚àÄ i, (x i).1 ‚àà (œÑs i).toZFSet) ‚Üí (hy : ‚àÄ i, (y i).1 ‚àà (œÑs i).toZFSet) ‚Üí ‚ü¶t x‚üßÀ¢.get (den_t_isSome hx) |>.2.1 = (‚ü¶t y‚üßÀ¢.get (den_t_isSome hy) |>.2.1) then
          -- compute the return type
          let x‚Çô : Fin n ‚Üí Dom := fun i ‚Ü¶ ‚ü®(œÑs i).defaultZFSet, œÑs i, SMTType.mem_toZFSet_of_defaultZFSet‚ü©
          let Œ≥ := ‚ü¶t x‚Çô‚üßÀ¢.get (den_t_isSome (fun i ‚Ü¶ SMTType.mem_toZFSet_of_defaultZFSet)) |>.2.1
          let œÑ : SMTType := Fin.foldr (n-1) (fun ‚ü®i, hi‚ü© acc ‚Ü¶ (œÑs ‚ü®i, Nat.lt_of_lt_pred hi‚ü©).pair acc) (œÑs ‚ü®n-1, Nat.sub_one_lt_of_lt n_pos‚ü©)

          have Œ≥_out (x : Fin n ‚Üí Dom) (hx : ‚àÄ i, (x i).1 ‚àà (œÑs i).toZFSet) :
              ‚ü¶t x‚üßÀ¢.get (den_t_isSome hx) |>.2.1 = Œ≥ := by
            specialize den_t_typ_det x x‚Çô hx ?_
            ¬∑ intro
              exact SMTType.mem_toZFSet_of_defaultZFSet
            ¬∑ exact den_t_typ_det

          -- compute the denotation of `t`
          let T (x : ZFSet) : ZFSet :=
            if hx : x.hasArity n ‚àß (‚àÄ i, x.get n i ‚àà (œÑs i).toZFSet) then
              let x‚Çô : Fin n ‚Üí Dom := fun i ‚Ü¶ ‚ü®x.get n i, œÑs i, hx.2 i‚ü©
              ‚ü¶t x‚Çô‚üßÀ¢.get (den_t_isSome hx.2) |>.1
            else Œ≥.defaultZFSet

          have range_T {x : ZFSet} (hx : x ‚àà œÑ.toZFSet) : T x ‚àà Œ≥.toZFSet := by
            unfold T
            split_ifs with cond
            ¬∑ extract_lets x‚Çô
              specialize Œ≥_out x‚Çô ?_
              ¬∑ exact cond.2
              ¬∑ rw [‚ÜêŒ≥_out]
                exact ‚ü¶t x‚Çô‚üßÀ¢.get _ |>.2.2
            ¬∑ exact SMTType.mem_toZFSet_of_defaultZFSet

          return ‚ü®ZFSet.lambda œÑ.toZFSet Œ≥.toZFSet T, œÑ.fun Œ≥, ZFSet.mem_funs_of_lambda range_T‚ü©
        else failure
      else failure
    else failure
  | @PHOAS.Term.forall _ n œÑs P => do
    if n_pos : n > 0 then
      if den_t_isSome : ‚àÄ {x : Fin n ‚Üí Dom}, (‚àÄ i, (x i).1 ‚àà (œÑs i).toZFSet) ‚Üí ‚ü¶P x‚üßÀ¢.isSome then
        -- compute the denotation of `P`
        let ‚Ñô (xy : ZFSet) :=
          if hxy : xy.hasArity 2 then
            let x := xy.œÄ‚ÇÅ
            let y := xy.œÄ‚ÇÇ
            if hx : x.hasArity n ‚àß (‚àÄ i, x.get n i ‚àà (œÑs i).toZFSet) then
              ‚ü¶P (fun i => ‚ü®x.get n i, œÑs i, hx.2 i‚ü©)‚üßÀ¢.get (den_t_isSome hx.2) |>.1
            else ZFSet.zffalse
          else ZFSet.zffalse
        let ùíü := Fin.foldl (n-1) (fun acc ‚ü®i, hi‚ü© ‚Ü¶ acc.prod (œÑs ‚ü®i+1, Nat.add_lt_of_lt_sub hi‚ü©).toZFSet) (œÑs ‚ü®0, n_pos‚ü©).toZFSet
        return ‚ü®ZFSet.sInter (ZFSet.ùîπ.sep fun y ‚Ü¶ ‚àÉ x ‚àà ùíü, y = ‚Ñô x : ZFSet), .bool, ZFSet.sInter_sep_subset_of_ùîπ_mem_ùîπ fun _ ‚Ü¶ id‚ü©
      else failure
    else failure
  -- | @PHOAS.Term.exists _ n œÑs P =>
  --   if n_pos : n > 0 then
  --     if den_t_isSome : ‚àÄ {x : Fin n ‚Üí Dom}, (‚àÄ i, (x i).1 ‚àà (œÑs i).toZFSet) ‚Üí ‚ü¶P x‚üßÀ¢.isSome then
  --       -- compute the denotation of `P`
  --       let ‚Ñô (xy : ZFSet) :=
  --         if hxy : xy.hasArity 2 then
  --           let x := xy.œÄ‚ÇÅ
  --           let y := xy.œÄ‚ÇÇ
  --           if hx : x.hasArity n ‚àß (‚àÄ i, x.get n i ‚àà (œÑs i).toZFSet) then
  --             ‚ü¶P (fun i => ‚ü®x.get n i, œÑs i, hx.2 i‚ü©)‚üßÀ¢.get (den_t_isSome hx.2) |>.1
  --           else ZFSet.zffalse
  --         else ZFSet.zffalse
  --       let ùíü := Fin.foldl (n-1) (fun acc ‚ü®i, hi‚ü© ‚Ü¶ acc.prod (œÑs ‚ü®i+1, Nat.add_lt_of_lt_sub hi‚ü©).toZFSet) (œÑs ‚ü®0, n_pos‚ü©).toZFSet
  --       return ‚ü®‚ãÉ‚ÇÄ ZFSet.ùîπ.sep fun y ‚Ü¶ ‚àÉ x ‚àà ùíü, y = ‚Ñô x, .bool, ZFSet.sUnion_sep_subset_of_ùîπ_mem_ùîπ fun _ ‚Ü¶ id‚ü©
  --     else failure
  --   else failure
  | x =À¢' y => do
    let ‚ü®X, Œ±, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢
    let ‚ü®Y, Œ≤, hY‚ü© ‚Üê ‚ü¶y‚üßÀ¢
    if Œ±_eq_Œ≤ : Œ± = Œ≤ then
      return ‚ü®X =·∂ª Y, .bool, overloadBinOp_mem hX (Œ±_eq_Œ≤ ‚ñ∏ hY)‚ü©
    else failure
  | p ‚àßÀ¢' q => do
    let ‚ü®P, .bool, hP‚ü© ‚Üê ‚ü¶p‚üßÀ¢ | failure
    let ‚ü®Q, .bool, hQ‚ü© ‚Üê ‚ü¶q‚üßÀ¢ | failure
    return ‚ü®P ‚ãÄ·∂ª Q, .bool, overloadBinOp_mem hP hQ‚ü©
  -- | p ‚à®À¢' q => do
  --   let ‚ü®P, .bool, hP‚ü© ‚Üê ‚ü¶p‚üßÀ¢ | failure
  --   let ‚ü®Q, .bool, hQ‚ü© ‚Üê ‚ü¶q‚üßÀ¢ | failure
  --   return ‚ü®P ‚ãÅ·∂ª Q, .bool, overloadBinOp_mem hP hQ‚ü©
  | ¬¨À¢' x => do
    let ‚ü®X, .bool, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢ | failure
    return ‚ü®¬¨·∂ª X, .bool, overloadUnaryOp_mem‚ü©
  -- | p ‚áíÀ¢' q => do
  --   let ‚ü®P, .bool, hP‚ü© ‚Üê ‚ü¶p‚üßÀ¢ | failure
  --   let ‚ü®Q, .bool, hQ‚ü© ‚Üê ‚ü¶q‚üßÀ¢ | failure
  --   return ‚ü®P ‚áí·∂ª Q, .bool, overloadBinOp_mem hP hQ‚ü©
  | .ite c t f => do
    let ‚ü®C, .bool, hC‚ü© ‚Üê ‚ü¶c‚üßÀ¢ | failure
    if ZFSet.ZFBool.toBool ‚ü®C, hC‚ü© then ‚ü¶t‚üßÀ¢ else ‚ü¶f‚üßÀ¢
  | .some t => do
    let ‚ü®T, œÑ, hTœÑ‚ü© ‚Üê ‚ü¶t‚üßÀ¢
    return ‚ü®ZFSet.Option.some ‚ü®T, hTœÑ‚ü© |>.1, œÑ.option, SetLike.coe_mem (ZFSet.Option.some ‚ü®T, hTœÑ‚ü©)‚ü©
  | .none œÑ =>
    return ‚ü®@ZFSet.Option.none œÑ.toZFSet |>.1, œÑ.option, SetLike.coe_mem ZFSet.Option.none‚ü©
  | .¬´()¬ª =>
    return ‚ü®‚àÖ, .unit, ZFSet.mem_singleton.mpr rfl‚ü©
  | .the t => do
    let ‚ü®T, .option œÑ, hTœÑ‚ü© ‚Üê ‚ü¶t‚üßÀ¢ | failure
    return ‚ü®ZFSet.Option.the SMTType.toZFSet_nonempty ‚ü®T, hTœÑ‚ü©, œÑ, SetLike.coe_mem _‚ü©
  | .pair x y => do
    let ‚ü®X, Œ±, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢
    let ‚ü®Y, Œ≤, hY‚ü© ‚Üê ‚ü¶y‚üßÀ¢
    return ‚ü®X.pair Y, Œ±.pair Œ≤, by
      rw [ZFSet.pair_mem_prod]
      exact ‚ü®hX, hY‚ü©‚ü©
  | .fst t => do
    let ‚ü®T, .pair Œ± Œ≤, hT‚ü© ‚Üê ‚ü¶t‚üßÀ¢ | failure
    return ‚ü®T.œÄ‚ÇÅ, Œ±, by
      rw [SMTType.toZFSet, ZFSet.mem_prod] at hT
      obtain ‚ü®T‚ÇÅ, hT‚ÇÅ, T‚ÇÇ, hT‚ÇÇ, rfl‚ü© := hT
      rwa [ZFSet.œÄ‚ÇÅ_pair]‚ü©
  | .snd t => do
    let ‚ü®T, .pair Œ± Œ≤, hT‚ü© ‚Üê ‚ü¶t‚üßÀ¢ | failure
    return ‚ü®T.œÄ‚ÇÇ, Œ≤, by
      rw [SMTType.toZFSet, ZFSet.mem_prod] at hT
      obtain ‚ü®T‚ÇÅ, hT‚ÇÅ, T‚ÇÇ, hT‚ÇÇ, rfl‚ü© := hT
      rwa [ZFSet.œÄ‚ÇÇ_pair]‚ü©
  | x ‚â§À¢' y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üßÀ¢ | failure
    return ‚ü®X ‚â§·∂ª Y, .bool,  overloadBinOp_mem hX hY‚ü©
  | .add x y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üßÀ¢ | failure
    return ‚ü®X +·∂ª Y, .int, overloadBinOp_mem hX hY‚ü©
  | .sub x y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üßÀ¢ | failure
    return ‚ü®X -·∂ª Y, .int, overloadBinOp_mem hX hY‚ü©
  | .mul x y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üßÀ¢ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üßÀ¢ | failure
    return ‚ü®X *·∂ª Y, .int, overloadBinOp_mem hX hY‚ü©
  | @PHOAS.Term.distinct _ n ts => do
    let Ts ‚Üê List.ofFn (fun i ‚Ü¶ ‚ü¶ts i‚üßÀ¢) |>.allSome
    return ‚ü®denote_distinct Ts, .bool, by exact SetLike.coe_mem _‚ü©
end Semantics

notation "‚ü¶" t "‚üßÀ¢" => denote t

end SMT
end
