import B.HOTyping.Rules

open B B.PHOAS

abbrev WellTyped.{u} {ùí± : Type u} [DecidableEq ùí±] (t : Term ùí±) :=
  Œ£' (Œì : TypeContext ùí±) (œÑ : BType), Œì ‚ä¢ t : œÑ

namespace PHOAS.Typing
open PHOAS Typing

theorem toTerm_sound {ùí±} [DecidableEq ùí±] {Œì : TypeContext ùí±} {Œ≥ : BType} : Œì ‚ä¢ Œ≥.toTerm' : Œ≥.set := by
  induction Œ≥ with
  | int => exact ¬´‚Ñ§¬ª
  | bool => exact ùîπ
  | set Œ± ih => exact pow ih
  | prod Œ± Œ≤ Œ±_ih Œ≤_ih => exact cprod Œ±_ih Œ≤_ih

theorem foldl_aux {ùí±} [DecidableEq ùí±] {Œì : TypeContext ùí±} {n : ‚Ñï} (Œ± : Fin (n + 1) ‚Üí BType) (D : Fin (n + 1) ‚Üí PHOAS.Term ùí±) (typD : ‚àÄ (i : Fin (n + 1)), Œì ‚ä¢ D i : (Œ± i).set) :
  Œì ‚ä¢ Fin.foldl n (Œª d ‚ü®i, hi‚ü© => d ‚®Ø·¥Æ' D ‚ü®i + 1, Nat.add_lt_add_right hi 1‚ü©) (D 0) : (Fin.foldl n (fun d ‚ü®i, hi‚ü© => d √ó·¥Æ Œ± ‚ü®i + 1, Nat.add_lt_add_right hi 1‚ü©) (Œ± 0)).set := by
  dsimp
  induction n with
  | zero =>
    simp
    exact typD 0
  | succ n IH =>
    simp only [Fin.foldl_succ_last, Fin.coe_castSucc, Fin.val_last]
    apply Typing.cprod
    ¬∑ let Œ±' : Fin (n + 1) ‚Üí BType := Œª ‚ü®i, hi‚ü© => Œ± ‚ü®i, Nat.lt_add_right 1 hi‚ü©
      let D' : Fin (n + 1) ‚Üí PHOAS.Term ùí± := Œª ‚ü®i, hi‚ü© => D ‚ü®i, Nat.lt_add_right 1 hi‚ü©
      specialize IH Œ±' D'
      apply IH
      rintro ‚ü®i, hi‚ü©
      exact typD ‚ü®i, Nat.lt_add_right 1 hi‚ü©
    ¬∑ exact typD ‚ü®n + 1, Nat.lt_add_one (n + 1)‚ü©

theorem foldl_aux' {ùí±} [DecidableEq ùí±] {Œì : TypeContext ùí±} {n : ‚Ñï} (n_pos : 0 < n) (Œ± : Fin n ‚Üí BType) (D : Fin n ‚Üí PHOAS.Term ùí±) (typD : ‚àÄ i : Fin n, Œì ‚ä¢ D i : (Œ± i).set) :
  Œì ‚ä¢ Fin.foldl (n - 1) (Œª d ‚ü®i, hi‚ü© => d ‚®Ø·¥Æ' D ‚ü®i + 1, Nat.add_lt_of_lt_sub hi‚ü©) (D ‚ü®0, n_pos‚ü©) : (Fin.foldl (n - 1) (fun d ‚ü®i, hi‚ü© => d √ó·¥Æ Œ± ‚ü®i + 1, Nat.add_lt_of_lt_sub hi‚ü©) (Œ± ‚ü®0, n_pos‚ü©)).set := by
  dsimp
  induction n with
  | zero =>
    simp
    exact typD ‚ü®0, n_pos‚ü©
  | succ n IH =>
    -- simp only [lt_add_iff_pos_left, add_pos_iff, zero_lt_one, or_true, forall_const] at IH
    cases n with
    | zero => exact typD 0
    | succ n =>
      simp only [Nat.add_one_sub_one, Fin.foldl_succ_last, Fin.coe_castSucc, Fin.val_last]
      apply Typing.cprod
      ¬∑ let Œ±' : Fin (n + 1) ‚Üí BType := Œª ‚ü®i, hi‚ü© => Œ± ‚ü®i, Nat.lt_add_right 1 hi‚ü©
        let D' : Fin (n + 1) ‚Üí PHOAS.Term ùí± := Œª ‚ü®i, hi‚ü© => D ‚ü®i, Nat.lt_add_right 1 hi‚ü©
        specialize IH (Nat.zero_lt_succ n) Œ±' D'
        apply IH
        rintro ‚ü®i, hi‚ü©
        exact typD ‚ü®i, Nat.lt_add_right 1 hi‚ü©
      ¬∑ exact typD ‚ü®n + 1, Nat.lt_add_one (n + 1)‚ü©

theorem collect_dom {ùí±} [DecidableEq ùí±] (n : ‚Ñï) (D : PHOAS.Term ùí±) (P : (Fin n ‚Üí ùí±) ‚Üí PHOAS.Term ùí±) (Œì : TypeContext ùí±) (œÑ : BType) {h : Œì ‚ä¢ D.collect P : œÑ} : Œì ‚ä¢ D : œÑ := by
  rcases h
  rename_i Œ± D n_pos typD typP
  obtain ‚ü®n, rfl‚ü© :=  Nat.exists_eq_add_one.mpr n_pos
  simp
  induction n with
  | zero =>
    simp only [Nat.reduceAdd, Fin.isValue, Fin.foldl_zero]
    exact typD 0
  | succ n IH =>
    let Œ±' : Fin (n+1) ‚Üí BType := Œª i => Œ± ‚ü®i, Nat.lt_add_right 1 i.prop‚ü©
    let D' : Fin (n+1) ‚Üí PHOAS.Term ùí± := Œª ‚ü®i, hi‚ü© => D ‚ü®i, Nat.lt_add_right 1 hi‚ü©
    apply foldl_aux Œ± D typD


open Classical in
theorem collect_pred {ùí±} {Œì n z} {D : PHOAS.Term ùí±} {P : (Fin n ‚Üí ùí±) ‚Üí PHOAS.Term ùí±} {œÑ : BType} :
  (h : Œì ‚ä¢ D.collect P : œÑ.set) ‚Üí Œì.update z (choose (Typing.collectE h).2 |>.1) ‚ä¢ P z : BType.bool := by
  intro h
  let ‚ü®‚ü®_,_,_,typP‚ü©,_‚ü© := choose_spec (Typing.collectE h).2
  exact typP z

theorem lambda_dom {ùí±} [DecidableEq ùí±] {n : ‚Ñï} {D : PHOAS.Term ùí±} {E : (Fin n ‚Üí ùí±) ‚Üí PHOAS.Term ùí±} {Œì : TypeContext ùí±} {œÑ Œ≥ : BType}
  (h : Œì ‚ä¢ .lambda D E : .set (œÑ √ó·¥Æ Œ≥)) : Œì ‚ä¢ D : .set œÑ := by
    rcases h
    rename_i Œ± D n_pos typD typE
    obtain ‚ü®n, rfl‚ü© :=  Nat.exists_eq_add_one.mpr n_pos
    simp
    induction n with
    | zero =>
      simp only [Nat.reduceAdd, Fin.isValue, Fin.foldl_zero]
      exact typD 0
    | succ n IH =>
      let Œ±' : Fin (n+1) ‚Üí BType := Œª i => Œ± ‚ü®i, Nat.lt_add_right 1 i.prop‚ü©
      let D' : Fin (n+1) ‚Üí PHOAS.Term ùí± := Œª ‚ü®i, hi‚ü© => D ‚ü®i, Nat.lt_add_right 1 hi‚ü©
      apply foldl_aux Œ± D typD

open Classical in
theorem lambda_exp {ùí±} [DecidableEq ùí±] {n : ‚Ñï} {D : PHOAS.Term ùí±} {E : (Fin n ‚Üí ùí±) ‚Üí PHOAS.Term ùí±} {Œì : TypeContext ùí±} {œÑ Œ≥ : BType}
  (h : Œì ‚ä¢ .lambda D E : .set (œÑ √ó·¥Æ Œ≥)) {z} : Œì.update z (choose (Typing.lambdaE h).2 |>.2.1) ‚ä¢ E z : (choose (Typing.lambdaE h).2 |>.1) := by
  let ‚ü®‚ü®_,_,_,typE‚ü©,_‚ü© := choose_spec (Typing.lambdaE h).2
  apply typE z

open Classical in
theorem all_pred {ùí±} [DecidableEq ùí±] {Œì n z} {D : PHOAS.Term ùí±} {P : (Fin n ‚Üí ùí±) ‚Üí PHOAS.Term ùí±} :
  (h : Œì ‚ä¢ D.all P : .bool) ‚Üí Œì.update z (choose (Typing.allE h).2.2 |>.1) ‚ä¢ P z : BType.bool := by
  intro h
  let ‚ü®_,_,typP‚ü© := choose_spec (Typing.allE h).2.2
  exact typP z

open Classical in
theorem all_dom {ùí±} [DecidableEq ùí±] {Œì n} {D : PHOAS.Term ùí±} {P : (Fin n ‚Üí ùí±) ‚Üí PHOAS.Term ùí±} :
  (h : Œì ‚ä¢ D.all P : .bool) ‚Üí
  let Œ±s_Ds := choose (Typing.allE h).2.2
  let Œ±s := Œ±s_Ds.1
  Œì ‚ä¢ D : .set (Fin.foldl (n-1) (Œª d ‚ü®i, hi‚ü© => d √ó·¥Æ Œ±s ‚ü®i+1, Nat.add_lt_of_lt_sub hi‚ü©) (Œ±s ‚ü®0, by cases h with | all _ _ _ h _ => exact h‚ü©)) := by
  intro h
  obtain n_pos := (Typing.allE h).2.1
  obtain ‚ü®typD, D_eq, _‚ü© := choose_spec (Typing.allE h).2.2
  dsimp
  conv in D => rw [D_eq]
  apply foldl_aux' n_pos
  exact typD

theorem PHOAS.Term.cprod_foldl_succ {ùí±} {n : ‚Ñï} {A : Fin (n + 1) ‚Üí PHOAS.Term ùí±} {a : PHOAS.Term ùí±} :
  Fin.foldl (n + 1) (fun d i => d ‚®Ø·¥Æ' A i) a = (Fin.foldl n (fun d ‚ü®i, hi‚ü© => d ‚®Ø·¥Æ' A ‚ü®i, Nat.lt_add_right 1 hi‚ü©) a) ‚®Ø·¥Æ' A ‚ü®n, Nat.lt_add_one n‚ü© :=
  Fin.foldl_succ_last (fun d i => d ‚®Ø·¥Æ' A i) a

theorem foldl_cprod_inj {ùí±} {n : ‚Ñï} {A B : Fin n ‚Üí PHOAS.Term ùí±} {a b : PHOAS.Term ùí±}
  (h_eq_fold : Fin.foldl n (fun d i => d ‚®Ø·¥Æ' A i) a = Fin.foldl n (fun d i => d ‚®Ø·¥Æ' B i) b) :
  a = b ‚àß A = B := by
  induction n generalizing a b with
  | zero =>
    and_intros
    ¬∑ simpa [Fin.foldl_zero] using h_eq_fold
    ¬∑ ext ‚ü®_, hi‚ü©
      nomatch hi
  | succ n ih =>
    simp_rw [PHOAS.Term.cprod_foldl_succ] at h_eq_fold
    injection h_eq_fold with h_eq_fold An_eq_Bn
    specialize ih h_eq_fold
    and_intros
    ¬∑ exact ih.1
    ¬∑ rw [funext_iff] at ih
      ext ‚ü®i, hi‚ü©
      cases hi with
      | refl => exact An_eq_Bn
      | step hi => exact ih.2 ‚ü®i, hi‚ü©

theorem foldl_cprod_inj' {ùí±} [DecidableEq ùí±] {n : ‚Ñï} {A B : Fin (n + 1) ‚Üí PHOAS.Term ùí±}
  (h_eq_fold : Fin.foldl n (fun d i => d ‚®Ø·¥Æ' A i.succ) (A 0) = Fin.foldl n (fun d i => d ‚®Ø·¥Æ' B i.succ) (B 0)) :
  A = B := by
  let A' := fun i => A (Fin.succ i)
  let B' := fun i => B (Fin.succ i)
  have := @foldl_cprod_inj _ n A' B' (A 0) (B 0) h_eq_fold
  unfold A' B' at this
  rw [funext_iff] at this
  ext ‚ü®i, hi‚ü©
  cases i with
  | zero => exact this.1
  | succ i => exact this.2 ‚ü®i, Nat.succ_lt_succ_iff.mp hi‚ü©

theorem det {ùí±} [DecidableEq ùí±] [Nonempty (Œ† n, Fin n ‚Üí ùí±)] {Œì : PHOAS.TypeContext ùí±} {t : PHOAS.Term ùí±} {œÑ œÉ : BType}
  (hœÑ : Œì ‚ä¢ t : œÑ) (hœÉ : Œì ‚ä¢ t : œÉ) : œÑ = œÉ := by
  induction hœÑ generalizing œÉ with
  | var ih =>
    apply PHOAS.Typing.varE at hœÉ
    rw [ih] at hœÉ
    rwa [Option.some.injEq] at hœÉ
  | int
  | bool =>
    first
    | rcases PHOAS.Typing.intE hœÉ
    | rcases PHOAS.Typing.boolE hœÉ
    rfl
  | maplet hx hy xih yih
  | add hx hy xih yih
  | sub hx hy xih yih
  | mul hx hy xih yih
  | and hx hy xih yih
  | eq hx hy xih yih
  | le hx hy xih yih
  | cprod hx hy xih yih
  | union hx hy xih yih
  | inter hx hy xih yih
  | pfun hx hy xih yih
  | app hx hy xih yih =>
    first
    | obtain ‚ü®Œ±, Œ≤, rfl, hx, hy‚ü© := PHOAS.Typing.mapletE hœÉ
    | obtain ‚ü®rfl, hx, hy‚ü© := PHOAS.Typing.addE hœÉ
    | obtain ‚ü®rfl, hx, hy‚ü© := PHOAS.Typing.subE hœÉ
    | obtain ‚ü®rfl, hx, hy‚ü© := PHOAS.Typing.mulE hœÉ
    | obtain ‚ü®rfl, hx, hy‚ü© := PHOAS.Typing.andE hœÉ
    | obtain ‚ü®rfl, Œ±, hx, hy‚ü© := PHOAS.Typing.eqE hœÉ
    | obtain ‚ü®rfl, hx, hy‚ü© := PHOAS.Typing.leE hœÉ
    | obtain ‚ü®Œ±, Œ≤, rfl, hx, hy‚ü© := PHOAS.Typing.cprodE hœÉ
    | obtain ‚ü®Œ±, rfl, hx, hy‚ü© := PHOAS.Typing.unionE hœÉ
    | obtain ‚ü®Œ±, rfl, hx, hy‚ü© := PHOAS.Typing.interE hœÉ
    | obtain ‚ü®Œ±, Œ≤, rfl, hx, hy‚ü© := PHOAS.Typing.pfunE hœÉ
    | obtain ‚ü®Œ±, hx, hy‚ü© := PHOAS.Typing.appE hœÉ
    rcases xih hx
    rcases yih hy
    rfl
  | ¬´‚Ñ§¬ª
  | ùîπ =>
    first
    | rcases PHOAS.Typing.‚Ñ§E hœÉ
    | rcases PHOAS.Typing.ùîπE hœÉ
    rfl
  | not hx ih
  | mem hx S ih Sih
  | pow hx ih
  | card hx ih
  | min _ ih
  | max _ ih =>
    first
    | obtain ‚ü®rfl, hx‚ü© := PHOAS.Typing.notE hœÉ
    | obtain ‚ü®rfl, Œ±, hS, hT‚ü© := PHOAS.Typing.memE hœÉ
    | obtain ‚ü®Œ±, rfl, hx‚ü© := PHOAS.Typing.powE hœÉ
    | obtain ‚ü®rfl, _, hS‚ü© := PHOAS.Typing.cardE hœÉ
    | obtain ‚ü®rfl, hx‚ü© := PHOAS.Typing.minE hœÉ
    | obtain ‚ü®rfl, hx‚ü© := PHOAS.Typing.maxE hœÉ
    rcases ih hx
    rfl
  | collect Œ± D P n_pos typD typP typD_ih typP_ih =>
    obtain ‚ü®n_pos, ‚ü®Œ±s, Ds‚ü©, ‚ü®Œ±_eq, hDs, D_eq, typP‚ü©, Œ±s_Ds_unq‚ü© := PHOAS.Typing.collectE hœÉ
    clear Œ±s_Ds_unq
    obtain ‚ü®n, rfl‚ü© := Nat.exists_add_one_eq.mpr n_pos
    clear n_pos
    simp only [Nat.add_one_sub_one, Fin.zero_eta] at *

    have : D = Ds := foldl_cprod_inj' D_eq
    subst Ds

    have : Œ± = Œ±s := by
      ext i
      have := typD_ih _ <| hDs i
      injection this

    rw [Œ±_eq, this]
  | all Œ± D P n_pos typD typP typD_ih typP_ih =>
    obtain ‚ü®rfl, _‚ü© := PHOAS.Typing.allE hœÉ
    rfl
  | lambda Œ± Œ≤ D E n_pos typD typE typD_ih typE_ih =>
    obtain ‚ü®-, ‚ü®Œ≥, Œ±s, Ds‚ü©, ‚ü®Œ±_eq, hDs, D_eq, typE'‚ü©, Œ±s_Ds_unq‚ü© := PHOAS.Typing.lambdaE hœÉ
    clear Œ±s_Ds_unq
    obtain ‚ü®n, rfl‚ü© := Nat.exists_add_one_eq.mpr n_pos
    simp only [Nat.add_one_sub_one, Fin.zero_eta] at *

    have : D = Ds := foldl_cprod_inj' D_eq
    subst Ds

    have : Œ± = Œ±s := by
      ext i
      have := typD_ih _ <| hDs i
      injection this

    rw [Œ±_eq, this]
    congr

    rw [this] at typE_ih
    rename Nonempty _ => inst
    exact typE_ih _ (typE' <| Nonempty.some inst (n+1))


end PHOAS.Typing
