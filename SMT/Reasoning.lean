import SMT.Semantics
import Extra.Utils
import Mathlib.Tactic.LiftLets

open Classical SMT PHOAS ZFSet

private lemma foldl_endo_mem {Œ±} {xs : List Œ±} {f : ZFSet ‚Üí Œ± ‚Üí ZFSet} {d : ZFSet} {B : ZFSet} (hd : d ‚àà B) (h : ‚àÄ x y, f x y ‚àà B) :
  xs.foldl f d ‚àà B := by
  induction xs generalizing d with
  | nil => exact hd
  | cons x xs ih => exact ih (h d x)

private lemma foldl_attach_zfand_toBool {xs : List ZFBool} {d : ZFBool} {f : ZFBool ‚Üí ZFBool} :
  (xs.attach.foldl (Œª acc ‚ü®x, hx‚ü© => acc ‚ãÄ (f x)) d).toBool = xs.attach.foldl (Œª (acc : Bool) ‚ü®x, hx‚ü© => acc && (f x).toBool) d.toBool := by
  induction xs generalizing d with
  | nil => simp
  | cons x xs ih =>
    rw [List.attach_cons, List.foldl_cons, List.foldl_cons]
    dsimp at ih ‚ä¢
    specialize @ih (d ‚ãÄ f x)
    rw [‚Üê ZFBool.toBool_and, List.foldl_map, List.foldl_map]
    exact ih

private lemma foldl_zfor_toBool {xs : List ZFBool} {d : ZFBool} :
  (xs.foldl (Œª acc x => acc ‚ãÅ x) d).toBool = xs.foldl (Œª (acc : Bool) x => acc ‚à® x.toBool) d.toBool := by
  induction xs generalizing d with
  | nil => simp
  | cons x xs ih =>
    rw [List.foldl_cons, List.foldl_cons]
    rw [@ih (d ‚ãÅ x)]
    congr
    rw [ZFBool.toBool_or, Bool.or_eq_decide]

noncomputable def denote.distinct_alt_def {Œì} {ts : List <| PHOAS.Term ZFSet} (h : Œì ‚ä¢ .distinct ts : .bool) : {x // x ‚àà ZFSet.ùîπ} :=
  let œÉ := choose (Typing.distinctE h).2.2
  let hts := choose_spec (Typing.distinctE h).2.2
  ‚ü®ts.upperDiag.attach.foldl (Œª acc ‚ü®‚ü®x, y‚ü©, hxy‚ü© =>
    let typ : Œì ‚ä¢ x : œÉ ‚àß Œì ‚ä¢ y : œÉ := And.casesOn (List.upperDiag_mem hxy) Œª hx' hy' => ‚ü®hts x hx', hts y hy'‚ü©
    let Z := overloadBinOp (A := œÉ.toZFSet) (¬∑.val) (Œª p => if p then ZFSet.ZFBool.true else ZFSet.ZFBool.false) ‚ä• (¬∑ = ¬∑) (x := ‚ü¶x‚üßÀ¢ ‚ü®Œì, œÉ, typ.1‚ü©) (y := ‚ü¶y‚üßÀ¢ ‚ü®Œì, œÉ, typ.2‚ü©)
    acc ‚ãÄ·∂ª (¬¨·∂ª Z)) ZFSet.zftrue, by
      dsimp [SMTType.toZFSet]
      apply foldl_endo_mem ZFBool.zftrue_mem_ùîπ
      rintro acc ‚ü®‚ü®x, y‚ü©, hxy‚ü©
      apply Subtype.property‚ü©

set_option pp.proofs true in
/--
The denotation of `distinct [t‚ÇÅ, ..., t‚Çô]` is equivalent to `‚ü¶t‚ÇÅ‚üßÀ¢ ‚â† ‚ü¶t‚ÇÇ‚üßÀ¢ ‚àß ... ‚àß ‚ü¶t‚Çô‚Çã‚ÇÅ‚üßÀ¢ ‚â† ‚ü¶t‚Çô‚üßÀ¢`.
-/
theorem denote_distinct_alt_def_correct {Œì} {ts} {h : Œì ‚ä¢ .distinct ts : .bool} : ‚ü¶.distinct ts‚üßÀ¢ ‚ü®Œì, .bool, h‚ü© = denote.distinct_alt_def h := by
  induction ts with
  | nil => nomatch Typing.distinctE h
  | cons t ts ih =>
    letI D‚ÇÅ : ZFBool := ‚ü¶PHOAS.Term.distinct (t :: ts)‚üßÀ¢ ‚ü®Œì, ‚ü®SMTType.bool, h‚ü©‚ü©
    letI D‚ÇÇ : ZFBool := denote.distinct_alt_def h
    refold_let D‚ÇÅ D‚ÇÇ
    cases hD‚ÇÅ : D‚ÇÅ using ZFBool.casesOn with
    | false =>
      unfold D‚ÇÅ at hD‚ÇÅ
      rw [denote, denote_aux.distinct, Subtype.coe_eta, ZFBool.ofBool_decide_eq_false_iff] at hD‚ÇÅ
      push_neg at hD‚ÇÅ
      generalize_proofs typ_ts hœÉ h_isfun at hD‚ÇÅ

      by_contra contr
      replace contr : D‚ÇÇ = ‚ä§ :=  ZFBool.not_bot_iff_top.mp Œª h => contr h.symm
      unfold D‚ÇÇ denote.distinct_alt_def at contr
      lift_lets at contr
      extract_lets œÉ at contr
      letI hts := choose_spec (denote.distinct_alt_def._proof_1 h)
      sorry
    | true => sorry
