import B.HOTyping
import Extra.ZFC_Extra
-- import Mathlib.Order.CompleteLattice
-- import Mathlib.Tactic.ExtractGoal
noncomputable section

namespace B
def BType.toZFSet : BType ‚Üí ZFSet
  | .int => .Int
  | .bool => .ùîπ
  | .set Œ± => .powerset Œ±.toZFSet
  | .prod Œ± Œ≤ => .prod Œ±.toZFSet Œ≤.toZFSet

notation:max "‚ü¶" z "‚üß·∂ª" => BType.toZFSet z

def BType.default {ùí±} : BType ‚Üí PHOAS.Term ùí±
  | .int => .int 0
  | .bool => .bool false
  | .set Œ± => .collect (n := 1) Œ±.toTerm' fun _ => .bool false
  | .prod Œ± Œ≤ => Œ±.default ‚Ü¶·¥Æ' Œ≤.default

def BType.defaultZFSet.{u} : BType ‚Üí ZFSet.{u}
  | .int => ZFSet.ofInt 0
  | .bool => ZFSet.zffalse
  | .set Œ± => Œ±.toZFSet.sep (fun _ => False)
  | .prod Œ± Œ≤ => (Œ±.defaultZFSet.pair Œ≤.defaultZFSet)

theorem BType.mem_toZFSet_of_defaultZFSet {Œ± : BType} : Œ±.defaultZFSet ‚àà Œ±.toZFSet := by
  induction Œ± with
  | int => exact ZFSet.mem_ofInt_Int 0
  | bool => exact ZFSet.ZFBool.mem_ofBool_ùîπ false
  | set Œ± ih =>
    rw [BType.toZFSet, ZFSet.mem_powerset]
    exact ZFSet.sep_subset_self
  | prod Œ± Œ≤ =>
    rw [BType.defaultZFSet, BType.toZFSet, ZFSet.pair_mem_prod]
    and_intros <;> assumption

theorem BType.toZFSet_nonempty {Œ± : BType} : (Œ± : BType).toZFSet ‚â† ‚àÖ := by
  induction Œ± <;> apply_rules [
    ZFSet.Int.nonempty,
    ZFSet.ZFBool.ùîπ.nonempty,
    ZFSet.powerset_nonempty,
    ZFSet.prod_nonempty]

theorem ZFSet.prod_sep_mem_toZFSet {œÑ Œ≥ : BType} {D R : ZFSet} {P : ZFSet ‚Üí Prop} : D ‚àà œÑ.toZFSet.powerset ‚Üí R ‚àà Œ≥.toZFSet.powerset ‚Üí (D.prod R).sep P ‚àà (œÑ.toZFSet.prod Œ≥.toZFSet).powerset := by
  intro hD hR
  rw [ZFSet.mem_powerset, ZFSet.subset_def] at hD hR ‚ä¢
  intro _ hz
  obtain ‚ü®d, hd, r, hr, rfl‚ü© := ZFSet.mem_prod.mp (ZFSet.mem_sep.mp hz).1
  rw [ZFSet.pair_mem_prod]
  exact ‚ü®hD hd, hR hr‚ü©

section Denotation

open Classical B.PHOAS in
def denote_aux.all {n} {D} {P : (Fin n ‚Üí ZFSet) ‚Üí B.PHOAS.Term ZFSet} {Œì}
  (denoteD : (wt : WellTyped D) ‚Üí Option {x : ZFSet // let ‚ü®_,œÑ,_‚ü© := wt; x ‚àà œÑ.toZFSet})
  (denoteP : (z : Fin n ‚Üí ZFSet) ‚Üí (wt : WellTyped (P z)) ‚Üí Option {x : ZFSet // let ‚ü®_,œÑ,_‚ü© := wt; x ‚àà œÑ.toZFSet})
  (h : Œì ‚ä¢ .all D P : .bool) : Option {x : ZFSet // x ‚àà ZFSet.ùîπ} := do
    let Œ±s_Ds := choose (Typing.allE h).2.2; let Œ±s := Œ±s_Ds.1
    let n_pos := (Typing.allE h).2.1
    let ‚ü®ùíü, _‚ü© ‚Üê denoteD ‚ü®Œì, .set (Fin.foldl (n-1) (Œª d ‚ü®i, hi‚ü© => d √ó·¥Æ Œ±s ‚ü®i+1, Nat.add_lt_of_lt_sub hi‚ü©) (Œ±s ‚ü®0, n_pos‚ü©)), PHOAS.Typing.all_dom h‚ü©
    let ‚Ñô (z : ZFSet) : ZFSet :=
      if z.hasArity n then
        match denoteP (z.get n) ‚ü®Œì.update (z.get n) Œ±s, .bool, PHOAS.Typing.all_pred h‚ü© with
        | some Pz => Pz
        | none => ZFSet.zffalse
      else ZFSet.zffalse
    return ‚ü®ZFSet.sInter (ZFSet.ùîπ.sep Œª y => ‚àÉ x ‚àà ùíü, y = ‚Ñô x), ZFSet.sInter_sep_subset_of_ùîπ_mem_ùîπ Œª _ => id‚ü©

open Classical B.PHOAS in
def denote_aux.lambda {n} {D} {P : (Fin n ‚Üí ZFSet) ‚Üí B.PHOAS.Term ZFSet} {Œì} {œÑ Œ≥ : BType}
  (denoteD : (wt : WellTyped D) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteP : (z : Fin n ‚Üí ZFSet) ‚Üí (wt : WellTyped (P z)) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ .lambda D P : (œÑ √ó·¥Æ Œ≥).set) : Option {x : ZFSet // x ‚àà (œÑ √ó·¥Æ Œ≥).set.toZFSet} := do
    let Œ≤_Œ±s_Ds := choose (Typing.lambdaE h).2; let Œ≤ := Œ≤_Œ±s_Ds.1; let Œ±s := Œ≤_Œ±s_Ds.2.1
    let ‚ü®ùíü, hùíü‚ü© ‚Üê denoteD ‚ü®Œì, .set œÑ, PHOAS.Typing.lambda_dom h‚ü©
    let ‚Ñô (xy : ZFSet) := xy.hasArity 2 ‚àß
      (let x := xy.œÄ‚ÇÅ
      let y := xy.œÄ‚ÇÇ
      x.hasArity n ‚àß
        match denoteP (x.get n) ‚ü®Œì.update (x.get n) Œ±s, Œ≤, PHOAS.Typing.lambda_exp h‚ü© with
        | some ‚ü®Pz, _‚ü© => Pz = y
        | none => False)
    return ‚ü®(ùíü.prod Œ≥.toZFSet).sep ‚Ñô, ZFSet.prod_sep_mem_toZFSet hùíü (ZFSet.mem_powerset.mpr fun _ => id)‚ü©

open Classical B.PHOAS in
def denote_aux.collect {n} {D} {P : (Fin n ‚Üí ZFSet) ‚Üí B.PHOAS.Term ZFSet} {Œì} {œÑ : BType}
  (denoteD : (wt : WellTyped D) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteP : (z : Fin n ‚Üí ZFSet) ‚Üí (wt : WellTyped (P z)) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ .collect D P : œÑ.set) : Option {x : ZFSet // x ‚àà œÑ.set.toZFSet} := do
    let Œ±s_Ds := choose (Typing.collectE h).2; let Œ±s := Œ±s_Ds.1
    let ‚ü®ùíü, hùíü‚ü© ‚Üê denoteD ‚ü®Œì, œÑ.set, PHOAS.Typing.collect_dom (h := h)‚ü©
    let ‚Ñô z :=
      if z.hasArity n then
        match denoteP (z.get n) ‚ü®Œì.update (z.get n) Œ±s, .bool, PHOAS.Typing.collect_pred h‚ü© with
        | some ‚ü®Pz, _‚ü© => Pz = ZFSet.zftrue
        | none => False
      else False
    return ‚ü®ùíü.sep ‚Ñô, (ZFSet.sep_mem_powerset hùíü)‚ü©

open Classical B.PHOAS in
/- NOTE: same as above with an exists (seen as a dependent and) in the condition.
  if hF : ‚àÉ (hf : F.IsPFunc Œ±.toZFSet Œ≤.toZFSet), X ‚àà F.Dom hf then
    let hf := choose hF
    let X_dom := choose_spec hF
    return F.fapply hf ‚ü®X, X_dom‚ü©
  else failure
-/
def denote_aux.pfun {A B : PHOAS.Term ZFSet} {Œì} {Œ± Œ≤ : BType}
  (denoteA : (wt : WellTyped A) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteB : (wt : WellTyped B) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ .pfun A B : (Œ± √ó·¥Æ Œ≤).set.set) : Option {x : ZFSet // x ‚àà (Œ± √ó·¥Æ Œ≤).set.set.toZFSet} := do
    let Œ±' := choose (Typing.pfunE h)
    let Œ≤' := choose <| choose_spec (Typing.pfunE h)
    let ‚ü®eq, hX, hY‚ü© := choose_spec <| choose_spec (Typing.pfunE h)
    have eq : Œ± = Œ±' ‚àß Œ≤ = Œ≤' := by apply And.intro <;> injections
    let ‚ü®A, hA‚ü© ‚Üê denoteA ‚ü®Œì, .set Œ±, eq.left ‚ñ∏ hX‚ü©
    let ‚ü®B, hB‚ü© ‚Üê denoteB ‚ü®Œì, .set Œ≤, eq.right ‚ñ∏ hY‚ü©
    return ‚ü®A.prod B |>.powerset |>.sep (Œª f => f.IsPFunc A B), ZFSet.prod_sep_is_pfunc_mem (ZFSet.mem_powerset.mp hA) (ZFSet.mem_powerset.mp hB)‚ü©

open Classical B.PHOAS in
def denote_aux.apply {f x : PHOAS.Term ZFSet} {Œì} {Œ≤ : BType}
  (denotef : (wt : WellTyped f) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denotex : (wt : WellTyped x) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ .app f x : Œ≤) : Option {x : ZFSet // x ‚àà Œ≤.toZFSet} := do
    let Œ± := choose (Typing.appE h)
    let ‚ü®hF, hX‚ü© := choose_spec (Typing.appE h)
    let ‚ü®F, _‚ü© ‚Üê denotef ‚ü®Œì, .set (Œ± √ó·¥Æ Œ≤), hF‚ü©
    let ‚ü®X, _‚ü© ‚Üê denotex ‚ü®Œì, Œ±, hX‚ü©
    if ispfun : F.IsPFunc Œ±.toZFSet Œ≤.toZFSet then
      if X_dom : X ‚àà F.Dom then
        return F.fapply ispfun ‚ü®X, X_dom‚ü©
      else failure
    else failure

open Classical B.PHOAS in
def denote_aux.card {S : PHOAS.Term ZFSet} {Œì}
  (denoteS : (wt : WellTyped S) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ |S|·¥Æ' : .int) : Option {x : ZFSet // x ‚àà ZFSet.Int} := do
    let Œ± := choose (Typing.cardE h |>.right)
    let hS := choose_spec (Typing.cardE h |>.right)
    let ‚ü®X, _‚ü© ‚Üê denoteS ‚ü®Œì, .set Œ±, hS‚ü©
    if finX : X.IsFinite then
      -- NOTE: the cardinality of a finite set is well-defined
      return ‚ü®‚ü∞ (ZFSet.ZFInt.ofZFNat <| ZFSet.Card ‚ü®X, finX‚ü©), Subtype.property _‚ü©
    else failure

open Classical B.PHOAS in
def denote_aux.max {S : PHOAS.Term ZFSet} {Œì}
  (denoteS : (wt : WellTyped S) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ .max S : .int) : Option {x : ZFSet // x ‚àà ZFSet.Int} := do
    let ‚ü®X, hX‚ü© ‚Üê denoteS ‚ü®Œì, .set .int, Typing.maxE h |>.right‚ü©
    have linord : LinearOrder {x // x ‚àà X} :=
      ZFSet.LinearOrder.ofSubset (by dsimp [BType.toZFSet] at hX; rw [‚Üê ZFSet.mem_powerset]; exact hX)
    if fin_nempX : X.IsFinite ‚àß X.Nonempty then
      -- NOTE: non-empty finite sets are guaranteed to have a maximum
      return ‚ü®ZFSet.Max X, ZFSet.mem_powerset.mp hX (ZFSet.Max_mem ‚ü®X, fin_nempX.left‚ü© fin_nempX.right)‚ü©
    else failure

open Classical B.PHOAS in
def denote_aux.min {S : PHOAS.Term ZFSet} {Œì}
  (denoteS : (wt : WellTyped S) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ .min S : .int) : Option {x : ZFSet // x ‚àà ZFSet.Int} := do
    let ‚ü®X, hX‚ü© ‚Üê denoteS ‚ü®Œì, .set .int, Typing.minE h |>.right‚ü©
    have linord : LinearOrder {x // x ‚àà X} :=
      ZFSet.LinearOrder.ofSubset (by dsimp [BType.toZFSet] at hX; rw [‚Üê ZFSet.mem_powerset]; exact hX)
    if fin_nempX : X.IsFinite ‚àß X.Nonempty then
      -- NOTE: non-empty finite sets are guaranteed to have a minimum
      return ‚ü®ZFSet.Min X, ZFSet.mem_powerset.mp hX (ZFSet.Min_mem ‚ü®X, fin_nempX.left‚ü© fin_nempX.right)‚ü©
    else failure

open Classical B.PHOAS
def denote_aux.inter {X Y : PHOAS.Term ZFSet} {Œì} {Œ± : BType}
  (denoteX : (wt : WellTyped X) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteY : (wt : WellTyped Y) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ X ‚à©·¥Æ' Y : Œ±.set) : Option {x : ZFSet // x ‚àà Œ±.set.toZFSet} := do
    let Œ±' := choose (Typing.interE h)
    let ‚ü®hŒ±', hS, hT‚ü© := choose_spec (Typing.interE h)
    have eq : Œ± = Œ±' := by injections hŒ±'
    let ‚ü®X, hX‚ü© ‚Üê denoteX ‚ü®Œì, .set Œ±, eq ‚ñ∏ hS‚ü©
    let ‚ü®Y, hY‚ü© ‚Üê denoteY ‚ü®Œì, .set Œ±, eq ‚ñ∏ hT‚ü©
    return ‚ü®X ‚à© Y, by
      dsimp [BType.toZFSet] at hX hY ‚ä¢
      rw [ZFSet.mem_powerset] at hX hY ‚ä¢
      exact inter_mono hX hY‚ü©

open Classical B.PHOAS
def denote_aux.union {X Y : PHOAS.Term ZFSet} {Œì} {Œ± : BType}
  (denoteX : (wt : WellTyped X) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteY : (wt : WellTyped Y) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ X ‚à™·¥Æ' Y : Œ±.set) : Option {x : ZFSet // x ‚àà Œ±.set.toZFSet} := do
    let Œ±' := choose (Typing.unionE h)
    let ‚ü®hŒ±', hS, hT‚ü© := choose_spec (Typing.unionE h)
    have eq : Œ± = Œ±' := by injections hŒ±'
    let ‚ü®X, hX‚ü© ‚Üê denoteX ‚ü®Œì, .set Œ±, eq ‚ñ∏ hS‚ü©
    let ‚ü®Y, hY‚ü© ‚Üê denoteY ‚ü®Œì, .set Œ±, eq ‚ñ∏ hT‚ü©
    return ‚ü®X ‚à™ Y, by
      dsimp [BType.toZFSet] at hX hY ‚ä¢
      rw [ZFSet.mem_powerset] at hX hY ‚ä¢
      exact union_mono hX hY‚ü©

open Classical B.PHOAS
def denote_aux.powerset {S : PHOAS.Term ZFSet} {Œì} {Œ± : BType}
  (denoteS : (wt : WellTyped S) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ ùí´·¥Æ' S : Œ±.set.set) : Option {x : ZFSet // x ‚àà Œ±.set.set.toZFSet} := do
    let Œ±' := choose (Typing.powE h)
    let ‚ü®hŒ±', hS‚ü© := choose_spec (Typing.powE h)
    have Œ±_eq : Œ± = Œ±' := by injections hŒ±'
    let ‚ü®X, hX‚ü© ‚Üê denoteS ‚ü®Œì, .set Œ±, Œ±_eq ‚ñ∏ hS‚ü©
    return ‚ü®X.powerset, by
      dsimp [BType.toZFSet] at hX ‚ä¢
      rw [ZFSet.mem_powerset] at hX ‚ä¢
      exact powerset_mono.mpr hX‚ü©

open Classical B.PHOAS
def denote_aux.cprod {X Y : PHOAS.Term ZFSet} {Œì} {Œ± Œ≤ : BType}
  (denoteX : (wt : WellTyped X) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteY : (wt : WellTyped Y) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ X ‚®Ø·¥Æ' Y : (Œ± √ó·¥Æ Œ≤).set) : Option {x : ZFSet // x ‚àà (Œ± √ó·¥Æ Œ≤).set.toZFSet} := do
    let Œ±' := choose (Typing.cprodE h)
    let hŒ±' := choose_spec (Typing.cprodE h)
    let Œ≤' := choose hŒ±'
    let ‚ü®hŒ≤', hS, hT‚ü© := choose_spec hŒ±'
    have eq : Œ± = Œ±' ‚àß Œ≤ = Œ≤' := by apply And.intro <;> injections hŒ≤'
    let ‚ü®X, hX‚ü© ‚Üê denoteX ‚ü®Œì, .set Œ±, eq.left ‚ñ∏ hS‚ü©
    let ‚ü®Y, hY‚ü© ‚Üê denoteY ‚ü®Œì, .set Œ≤, eq.right ‚ñ∏ hT‚ü©
    return ‚ü®X.prod Y, by
      dsimp [BType.toZFSet] at hX hY ‚ä¢
      rw [ZFSet.mem_powerset] at hX hY ‚ä¢
      intros _ hz
      rw [ZFSet.mem_prod] at hz ‚ä¢
      obtain ‚ü®a, ha, b, hb, rfl‚ü© := hz
      exact ‚ü®a, hX ha, b, hY hb, rfl‚ü©
    ‚ü©

open Classical B.PHOAS
def denote_aux.mem {x S : PHOAS.Term ZFSet} {Œì}
  (denotex : (wt : WellTyped x) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denoteS : (wt : WellTyped S) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ x ‚àà·¥Æ' S : .bool) : Option {x : ZFSet // x ‚àà ZFSet.ùîπ} := do
    let Œ± := choose (Typing.memE h |>.right)
    let ‚ü®hx, hS‚ü© := choose_spec (Typing.memE h |>.right)
    let ‚ü®X, _‚ü© ‚Üê denotex ‚ü®Œì, Œ±, hx‚ü©
    let ‚ü®T, _‚ü© ‚Üê denoteS ‚ü®Œì, .set Œ±, hS‚ü©
    return ‚ü®X ‚àà·∂ª T, overloadUnaryOp_mem‚ü©

open Classical B.PHOAS
def denote_aux.eq {x y : PHOAS.Term ZFSet} {Œì}
  (denotex : (wt : WellTyped x) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (denotey : (wt : WellTyped y) ‚Üí Option {x : ZFSet // let ‚ü®_,Œæ,_‚ü© := wt; x ‚àà Œæ.toZFSet})
  (h : Œì ‚ä¢ x =·¥Æ' y : .bool) : Option {x : ZFSet // x ‚àà ZFSet.ùîπ} := do
    let Œ± := choose (Typing.eqE h |>.right)
    let ‚ü®hx, hy‚ü© := choose_spec (Typing.eqE h |>.right)
    let ‚ü®X, hX‚ü© ‚Üê denotex ‚ü®Œì, Œ±, hx‚ü©
    let ‚ü®Y, hY‚ü© ‚Üê denotey ‚ü®Œì, Œ±, hy‚ü©
    return ‚ü®X =·∂ª Y,  overloadBinOp_mem hX hY‚ü©

def BType.get (œÑ : BType) (length : ‚Ñï) (i : Fin length) : BType :=
  match length, i, œÑ with
  | 0, i, _ => nomatch i.prop
  | 1, i, œÑ => if h : i.val = 0 then œÑ else nomatch h (Fin.val_eq_zero i)
  | n+2, ‚ü®i, hi‚ü©, œÑ =>
    match œÑ with
    | .prod Œ± Œ≤ =>
      if h : i = n+1 then Œ≤ else get Œ± (n+1) ‚ü®i, by omega‚ü©
    | _ => œÑ

theorem BType.get_of_foldl {n : ‚Ñï} {Œ±s : Fin (n + 1) ‚Üí BType} {i : Fin (n + 1)}:
  (Fin.foldl n (fun d i => d √ó·¥Æ Œ±s i.succ) (Œ±s 0)).get (n + 1) i = Œ±s i := by
  induction n with
  | zero =>
    rcases Fin.fin_one_eq_zero i
    rw [Fin.foldl_zero, BType.get]
    rfl
  | succ n ih =>
    rw [Fin.foldl_succ_last, BType.get]
    split_ifs with hi
    ¬∑ congr
      exact Fin.eq_of_val_eq hi.symm
    ¬∑ apply @ih (fun ‚ü®i, hi‚ü© => Œ±s ‚ü®i, Nat.lt_add_right 1 hi‚ü©)

theorem PHOAS.Term.get_of_foldl_defaultZFSet {n : ‚Ñï} {Œ±s : Fin (n + 1) ‚Üí BType} {i : Fin (n + 1)} :
  (Fin.foldl n (fun d i => d √ó·¥Æ Œ±s i.succ) (Œ±s 0)).defaultZFSet.get (n + 1) i = (Œ±s i).defaultZFSet := by
  induction n with
  | zero =>
    rcases Fin.fin_one_eq_zero i
    rw [Fin.foldl_zero, ZFSet.get]
  | succ n ih =>
    rw [Fin.foldl_succ_last, ZFSet.get]
    split_ifs with hi
    ¬∑ rw [BType.defaultZFSet, ZFSet.œÄ‚ÇÇ_pair, Fin.last, Fin.succ_mk]
      congr
      symm
      rwa [Fin.ext_iff] at hi
    ¬∑ rw [BType.defaultZFSet, ZFSet.œÄ‚ÇÅ_pair]
      exact @ih
        (fun i => Œ±s ‚ü®i.val, Nat.lt_add_right 1 i.is_lt‚ü©)
        ‚ü®i, Nat.lt_iff_le_and_ne.mpr ‚ü®Fin.is_le i, by rwa [Fin.ext_iff] at hi‚ü©‚ü©

open Classical in
def BType.hasArity : BType ‚Üí ‚Ñï ‚Üí Prop
  | _, 0 => False
  | _, 1 => True
  | œÑ, n+2 =>
    match œÑ with
    | .prod Œ± _ => Œ±.hasArity (n+1)
    | _ => False

theorem BType.hasArity_of_foldl_defaultZFSet {Œ± : BType} {n : ‚Ñï} (hŒ± : Œ±.hasArity n) :
  Œ±.defaultZFSet.hasArity n := by
  induction n generalizing Œ± with
  | zero =>
    unfold BType.hasArity at hŒ±
    nomatch hŒ±
  | succ n ih =>
    cases n with
    | zero => trivial
    | succ n =>
      unfold BType.hasArity at hŒ±
      unfold BType.defaultZFSet
      cases Œ± with
      | prod œÑ œÉ =>
        dsimp at hŒ± ‚ä¢
        simp only [ZFSet.hasArity, ZFSet.pair_inj, exists_and_left, exists_eq', and_true, ‚ÜìreduceIte, ZFSet.œÄ‚ÇÅ_pair]
        exact ih hŒ±
      | _ => nomatch hŒ±

theorem get_mem_type_of_isTuple {n : ‚Ñï} {i : Fin n} {œÑ : BType} {z : ZFSet}
  (hz : z.hasArity n) (hœÑ : œÑ.hasArity n) (hz' : z ‚àà œÑ.toZFSet) :
    z.get n i ‚àà (œÑ.get n i).toZFSet := by
    fun_induction ZFSet.hasArity generalizing œÑ with
    | case1 => nomatch hz
    | case2 =>
      rcases Fin.fin_one_eq_zero i
      unfold ZFSet.get BType.get
      exact hz'
    | case3 x n npos hx ih =>
      cases n with
      | zero =>
        rcases Fin.fin_one_eq_zero i
        unfold ZFSet.get BType.get
        exact hz'
      | succ n =>
        unfold BType.hasArity at hœÑ
        unfold ZFSet.get BType.get
        split at hœÑ using Œ± Œ≤
        ¬∑ split_ifs with _ hi hi
          ¬∑ rw [BType.toZFSet, ZFSet.mem_prod] at hz'
            obtain ‚ü®_, hŒ±, _, hŒ≤, rfl‚ü© := hz'
            rwa [ZFSet.œÄ‚ÇÇ_pair]
          ¬∑ rw [Fin.ext_iff] at hi
            contradiction
          ¬∑ rw [Fin.ext_iff] at hi
            contradiction
          ¬∑ letI i' : Fin (n+1) := ‚ü®i, Nat.lt_iff_le_and_ne.mpr ‚ü®Nat.le_of_lt_succ i.prop, by rwa [Fin.ext_iff] at hi‚ü©‚ü©
            have := ih (i := i.castPred hi) hz hœÑ
            rw [BType.toZFSet, ZFSet.mem_prod] at hz'
            obtain ‚ü®_, hŒ±, _, hŒ≤, rfl‚ü© := hz'
            apply ih hz hœÑ
            rwa [ZFSet.œÄ‚ÇÅ_pair]
        ¬∑ nomatch hœÑ
    | case4 x n npos hx =>
      cases n with
      | zero =>
        rcases Fin.fin_one_eq_zero i
        unfold ZFSet.get BType.get
        exact hz'
      | succ n =>
        unfold BType.hasArity at hœÑ
        unfold ZFSet.get BType.get
        split at hœÑ using Œ± Œ≤
        ¬∑ rw [BType.toZFSet, ZFSet.mem_prod] at hz'
          nomatch hz
        ¬∑ nomatch hœÑ

set_option hygiene false
local notation "‚ü¶" t "‚üß·¥Æ" => denote t

abbrev Dom := Œ£' (x : ZFSet) (œÑ : BType), x ‚àà œÑ.toZFSet

def ZFSet.ofFinDom {n : ‚Ñï} (x : Fin n ‚Üí Dom) : ZFSet :=
  match n with
  | 0 => ‚àÖ
  | n+1 => Fin.foldl n (fun (z : ZFSet) i => z.pair (x i.succ).1) (x 0).1

-- set_option trace.profiler true in
open Classical B.PHOAS in
def denote (t : PHOAS.Term Dom) : Option Dom :=
  match t with
  | B.PHOAS.Term.var v => return v
  | B.PHOAS.Term.int n => return ‚ü®.ofInt n, .int, ZFSet.mem_ofInt_Int n‚ü©
  | B.PHOAS.Term.bool b => return ‚ü®ZFSet.ZFBool.ofBool b, .bool, ZFSet.ZFBool.mem_ofBool_ùîπ b‚ü©
  | x ‚Ü¶·¥Æ' y => do
    let ‚ü®X, Œ±, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ
    let ‚ü®Y, Œ≤, hY‚ü© ‚Üê ‚ü¶y‚üß·¥Æ
    have hXY : X.pair Y ‚àà (Œ± √ó·¥Æ Œ≤).toZFSet := by
      rw [BType.toZFSet, ZFSet.pair_mem_prod]
      exact ‚ü®hX, hY‚ü©
    return ‚ü®X.pair Y, Œ± √ó·¥Æ Œ≤, hXY‚ü©
  | p ‚àß·¥Æ' q => do
    let ‚ü®p', .bool, hp'‚ü© ‚Üê ‚ü¶p‚üß·¥Æ | failure
    let ‚ü®q', .bool, hq'‚ü© ‚Üê ‚ü¶q‚üß·¥Æ | failure
    return ‚ü®p' ‚ãÄ·∂ª q', .bool, overloadBinOp_mem hp' hq'‚ü©
  | x +·¥Æ' y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üß·¥Æ | failure
    return ‚ü®X +·∂ª Y, .int, overloadBinOp_mem hX hY‚ü©
  | x -·¥Æ' y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üß·¥Æ | failure
    return ‚ü®X -·∂ª Y, .int, overloadBinOp_mem hX hY‚ü©
  | x *·¥Æ' y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üß·¥Æ | failure
    return ‚ü®X *·∂ª Y, .int, overloadBinOp_mem hX hY‚ü©
  | x ‚â§·¥Æ' y => do
    let ‚ü®X, .int, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ | failure
    let ‚ü®Y, .int, hY‚ü© ‚Üê ‚ü¶y‚üß·¥Æ | failure
    return ‚ü®X ‚â§·∂ª Y, .bool, overloadBinOp_mem hX hY‚ü©
  | ¬¨·¥Æ' x => do
    let ‚ü®X, .bool, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ | failure
    return ‚ü®¬¨·∂ª X, .bool, overloadUnaryOp_mem‚ü©
  | x =·¥Æ' y => do
    -- denote_aux.eq ‚ü¶x‚üß·¥Æ ‚ü¶y‚üß·¥Æ h
    let ‚ü®X, Œ±, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ
    let ‚ü®Y, Œ≤, hY‚ü© ‚Üê ‚ü¶y‚üß·¥Æ
    if Œ±_eq_Œ≤ : Œ± = Œ≤ then
      return ‚ü®X =·∂ª Y, .bool, overloadBinOp_mem hX (Œ±_eq_Œ≤ ‚ñ∏ hY)‚ü©
    else failure
  | B.PHOAS.Term.‚Ñ§ => return ‚ü®ZFSet.Int, .set .int, ZFSet.mem_powerset.mpr fun _ => id‚ü©
  | B.PHOAS.Term.ùîπ => return ‚ü®ZFSet.ùîπ, .set .bool, ZFSet.mem_powerset.mpr fun _ => id‚ü©
  | x ‚àà·¥Æ' S => do
    -- denote_aux.mem ‚ü¶x‚üß·¥Æ ‚ü¶S‚üß·¥Æ h
    let ‚ü®X, Œ±, hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ
    let ‚ü®S', .set Œ≤, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    if Œ±_eq_Œ≤ : Œ± = Œ≤ then
      return ‚ü®X ‚àà·∂ª S', .bool, overloadUnaryOp_mem‚ü©
    else failure
  | S ‚®Ø·¥Æ' T => do
    -- denote_aux.cprod ‚ü¶S‚üß·¥Æ ‚ü¶T‚üß·¥Æ h
    let ‚ü®S', .set Œ±, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    let ‚ü®T', .set Œ≤, hT'‚ü© ‚Üê ‚ü¶T‚üß·¥Æ | failure
    return ‚ü®S'.prod T', .set (Œ± √ó·¥Æ Œ≤), by
      dsimp [BType.toZFSet] at hS' hT' ‚ä¢
      rw [ZFSet.mem_powerset] at hS' hT' ‚ä¢
      intros _ hz
      rw [ZFSet.mem_prod] at hz ‚ä¢
      obtain ‚ü®a, ha, b, hb, rfl‚ü© := hz
      exact ‚ü®a, hS' ha, b, hT' hb, rfl‚ü©
      ‚ü©
  | ùí´·¥Æ' S => do
    -- denote_aux.powerset ‚ü¶S‚üß·¥Æ h
    let ‚ü®S', .set Œ±, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    return ‚ü®S'.powerset, Œ±.set.set, by
      dsimp [BType.toZFSet] at hS' ‚ä¢
      rw [ZFSet.mem_powerset] at hS' ‚ä¢
      exact powerset_mono.mpr hS'‚ü©
  | S ‚à™·¥Æ' T => do
    -- denote_aux.union ‚ü¶S‚üß·¥Æ ‚ü¶T‚üß·¥Æ h
    let ‚ü®S', .set Œ±, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    let ‚ü®T', .set Œ≤, hT'‚ü© ‚Üê ‚ü¶T‚üß·¥Æ | failure
    if Œ±_eq_Œ≤ : Œ± = Œ≤ then
      return ‚ü®S'.union T', .set Œ±, by
        dsimp [BType.toZFSet] at hS' hT' ‚ä¢
        rw [ZFSet.mem_powerset] at hS' hT' ‚ä¢
        exact union_mono hS' (Œ±_eq_Œ≤ ‚ñ∏ hT')‚ü©
    else failure
  | S ‚à©·¥Æ' T => do
    -- denote_aux.inter ‚ü¶S‚üß·¥Æ ‚ü¶T‚üß·¥Æ h
    let ‚ü®S', .set Œ±, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    let ‚ü®T', .set Œ≤, hT'‚ü© ‚Üê ‚ü¶T‚üß·¥Æ | failure
    if Œ±_eq_Œ≤ : Œ± = Œ≤ then
      return ‚ü®S'.inter T', .set Œ±, by
        dsimp [BType.toZFSet] at hS' hT' ‚ä¢
        rw [ZFSet.mem_powerset] at hS' hT' ‚ä¢
        exact inter_mono hS' (Œ±_eq_Œ≤ ‚ñ∏ hT')‚ü©
    else failure
  | B.PHOAS.Term.min S => do
    -- denote_aux.min ‚ü¶S‚üß·¥Æ h
    let ‚ü®S', .set .int, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    have linord : LinearOrder {x // x ‚àà S'} :=
      ZFSet.LinearOrder.ofSubset (by dsimp [BType.toZFSet] at hS' ‚ä¢; rw [‚Üê ZFSet.mem_powerset]; exact hS')
    if fin_nempS' : S'.IsFinite ‚àß S'.Nonempty then
      -- NOTE: non-empty finite sets are guaranteed to have a minimum
      return ‚ü®ZFSet.Min S', .int, ZFSet.mem_powerset.mp hS' (ZFSet.Min_mem ‚ü®S', fin_nempS'.1‚ü© fin_nempS'.2)‚ü©
    else failure
  | B.PHOAS.Term.max S => do
    -- denote_aux.max ‚ü¶S‚üß·¥Æ h
    let ‚ü®S', .set .int, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    have linord : LinearOrder {x // x ‚àà S'} :=
      ZFSet.LinearOrder.ofSubset (by dsimp [BType.toZFSet] at hS' ‚ä¢; rw [‚Üê ZFSet.mem_powerset]; exact hS')
    if fin_nempS' : S'.IsFinite ‚àß S'.Nonempty then
      -- NOTE: non-empty finite sets are guaranteed to have a maximum
      return ‚ü®ZFSet.Max S', .int, ZFSet.mem_powerset.mp hS' (ZFSet.Max_mem ‚ü®S', fin_nempS'.1‚ü© fin_nempS'.2)‚ü©
    else failure
  | |S|·¥Æ' => do
    -- denote_aux.card ‚ü¶S‚üß·¥Æ h
    let ‚ü®S', .set Œ±, hS'‚ü© ‚Üê ‚ü¶S‚üß·¥Æ | failure
    if finS' : S'.IsFinite then
      -- NOTE: the cardinality of a finite set is well-defined
      return ‚ü®‚ü∞ (ZFSet.ZFInt.ofZFNat <| ZFSet.Card ‚ü®S', finS'‚ü©), .int, Subtype.property _‚ü©
    else failure
  | B.PHOAS.Term.app f x => do
    -- denote_aux.apply ‚ü¶f‚üß·¥Æ ‚ü¶x‚üß·¥Æ h
    let ‚ü®F, .set (œÑ √ó·¥Æ œÉ), hF‚ü© ‚Üê ‚ü¶f‚üß·¥Æ | failure
    let ‚ü®X, œÑ', hX‚ü© ‚Üê ‚ü¶x‚üß·¥Æ
    if œÑ_eq_œÑ' : œÑ = œÑ' then
      if ispfun : F.IsPFunc œÑ.toZFSet œÉ.toZFSet then
        if X_dom : X ‚àà F.Dom then
          let ‚ü®Y, hY‚ü© := F.fapply ispfun ‚ü®X, X_dom‚ü©
          return ‚ü®Y, œÉ, hY‚ü©
        else failure
      else failure
    else failure
  | X ‚á∏·¥Æ' Y => do
    -- denote_aux.pfun ‚ü¶X‚üß·¥Æ ‚ü¶Y‚üß·¥Æ h
    let ‚ü®A, .set Œ±, hA‚ü© ‚Üê ‚ü¶X‚üß·¥Æ | failure
    let ‚ü®B, .set Œ≤, hB‚ü© ‚Üê ‚ü¶Y‚üß·¥Æ | failure
    return ‚ü®
      A.prod B |>.powerset |>.sep (Œª f => f.IsPFunc A B),
      .set (.set (Œ± √ó·¥Æ Œ≤)),
      ZFSet.prod_sep_is_pfunc_mem (ZFSet.mem_powerset.mp hA) (ZFSet.mem_powerset.mp hB)‚ü©
  | @B.PHOAS.Term.collect _ n D P => do
    -- denote_aux.collect ‚ü¶D‚üß·¥Æ (Œª z => ‚ü¶P z‚üß·¥Æ) h
    let ‚ü®ùíü, .set œÑ, hùíü‚ü© ‚Üê ‚ü¶D‚üß·¥Æ | failure
    if den_P : ‚àÄ {x}, ZFSet.ofFinDom x ‚àà ùíü ‚Üí ‚ü¶P x‚üß·¥Æ.isSome then
      if typP_det : ‚àÄ x y, (x_ùíü : ZFSet.ofFinDom x ‚àà ùíü) ‚Üí (y_ùíü : ZFSet.ofFinDom y ‚àà ùíü) ‚Üí ‚ü¶P x‚üß·¥Æ.get (den_P x_ùíü) |>.2.1 = (‚ü¶P y‚üß·¥Æ.get (den_P y_ùíü) |>.2.1) then
        let ‚Ñô z :=
          if hz : z.hasArity n ‚àß œÑ.hasArity n ‚àß z ‚àà œÑ.toZFSet then
            let z‚Çô : Fin n ‚Üí Dom := fun i => ‚ü®z.get n i, œÑ.get n i, get_mem_type_of_isTuple hz.1 hz.2.1 hz.2.2‚ü©
            match ‚ü¶P z‚Çô‚üß·¥Æ with
            | some ‚ü®Pz, _, _‚ü© => Pz = ZFSet.zftrue
            | none => False
          else False
        return ‚ü®ùíü.sep ‚Ñô, .set œÑ, (ZFSet.sep_mem_powerset hùíü)‚ü©
      else failure
    else failure
  | @B.PHOAS.Term.lambda _ n D E => do
    -- denote_aux.lambda ‚ü¶D‚üß·¥Æ (Œª z => ‚ü¶E z‚üß·¥Æ) h
    let ‚ü®ùíü, .set œÑ, hùíü‚ü© ‚Üê ‚ü¶D‚üß·¥Æ | failure
    if hœÑ : œÑ.hasArity n then
      -- check if the domain is non-empty (should be provable not a conditional)
      if den_E : ‚àÄ {x}, ZFSet.ofFinDom x ‚àà ùíü ‚Üí ‚ü¶E x‚üß·¥Æ.isSome then
        if typE_det : ‚àÄ x y, (x_ùíü : ZFSet.ofFinDom x ‚àà ùíü) ‚Üí (y_ùíü : ZFSet.ofFinDom y ‚àà ùíü) ‚Üí ‚ü¶E x‚üß·¥Æ.get (den_E x_ùíü) |>.2.1 = (‚ü¶E y‚üß·¥Æ.get (den_E y_ùíü) |>.2.1) then
          if ùíü_nemp : ùíü ‚â† ‚àÖ then
            /- compute the return type Œ≥ of the function -/
            let x := choose (ZFSet.nonempty_exists_iff.mp ùíü_nemp)
            let x_def := choose_spec (ZFSet.nonempty_exists_iff.mp ùíü_nemp)
            -- `x`  must have arity `n` by definition, however we can put it in a conditional for now
            if hx : x.hasArity n ‚àß x ‚àà œÑ.toZFSet then
              let x‚Çô : Fin n ‚Üí Dom := fun i => ‚ü®x.get n i, œÑ.get n i, get_mem_type_of_isTuple hx.1 hœÑ hx.2‚ü©
              let ‚ü®_, Œ≥, _‚ü© ‚Üê ‚ü¶E x‚Çô‚üß·¥Æ

              /- compute the denotation of `E` -/
              let ‚Ñ∞ (xy : ZFSet) :=
                if hxy : xy.hasArity 2 then
                  let x := xy.œÄ‚ÇÅ
                  let y := xy.œÄ‚ÇÇ
                  if hx : x.hasArity n ‚àß x ‚àà ùíü then
                    let x‚Çô : Fin n ‚Üí Dom := fun i => ‚ü®x.get n i, œÑ.get n i, by
                      rw [BType.toZFSet, ZFSet.mem_powerset] at hùíü
                      exact get_mem_type_of_isTuple hx.1 hœÑ (hùíü hx.2)‚ü©
                    match (motive := Option Dom ‚Üí Prop) ‚ü¶E x‚Çô‚üß·¥Æ with
                    | some ‚ü®ex, Œæ, _‚ü© => if Œæ = Œ≥ then ex = y else False
                    | none => False
                  else False
                else False
              return ‚ü®(ùíü.prod Œ≥.toZFSet).sep ‚Ñ∞, .set (œÑ √ó·¥Æ Œ≥), ZFSet.prod_sep_mem_toZFSet hùíü (ZFSet.mem_powerset.mpr fun _ => id)‚ü©
            else failure
          else
            if h : œÑ.defaultZFSet.hasArity n ‚àß œÑ.hasArity n then
              let x‚Çô : Fin n ‚Üí Dom := fun i => ‚ü®œÑ.defaultZFSet.get n i, œÑ.get n i, get_mem_type_of_isTuple h.1 h.2 BType.mem_toZFSet_of_defaultZFSet‚ü©
              let ‚ü®_, Œ≥, _‚ü© ‚Üê ‚ü¶E x‚Çô‚üß·¥Æ
              return ‚ü®‚àÖ, (œÑ √ó·¥Æ Œ≥).set, by rw [BType.toZFSet, ZFSet.mem_powerset]; apply ZFSet.empty_subset‚ü©
            else failure
        else failure
      else failure
    else failure
  | @B.PHOAS.Term.all _ n D P => do
    -- denote_aux.all ‚ü¶D‚üß·¥Æ (Œª z => ‚ü¶P z‚üß·¥Æ) h
    -- let ‚ü®ùíü, _‚ü© ‚Üê denoteD ‚ü®Œì, .set (Fin.foldl (n-1) (Œª d ‚ü®i, hi‚ü© => d √ó·¥Æ Œ±s ‚ü®i+1, Nat.add_lt_of_lt_sub hi‚ü©) (Œ±s ‚ü®0, n_pos‚ü©)), PHOAS.Typing.all_dom h‚ü©
    let ‚ü®ùíü, .set œÑ, hùíü‚ü© ‚Üê ‚ü¶D‚üß·¥Æ | failure
    if hœÑ : œÑ.hasArity n then
      if den_P : ‚àÄ {x}, ZFSet.ofFinDom x ‚àà ùíü ‚Üí ‚ü¶P x‚üß·¥Æ.isSome then
        if typP_det : ‚àÄ x y, (x_ùíü : ZFSet.ofFinDom x ‚àà ùíü) ‚Üí (y_ùíü : ZFSet.ofFinDom y ‚àà ùíü) ‚Üí ‚ü¶P x‚üß·¥Æ.get (den_P x_ùíü) |>.2.1 = (‚ü¶P y‚üß·¥Æ.get (den_P y_ùíü) |>.2.1) then
          /- compute the denotation of `P` -/
          let ‚Ñô (x : ZFSet) :=
            if hx : x.hasArity n ‚àß x ‚àà œÑ.toZFSet then
              let x‚Çô : Fin n ‚Üí Dom := fun i => ‚ü®x.get n i, œÑ.get n i, get_mem_type_of_isTuple hx.1 hœÑ hx.2‚ü©
              match ‚ü¶P x‚Çô‚üß·¥Æ  with
              | some ‚ü®Px, _, _‚ü© => Px
              | none => ZFSet.zffalse
            else ZFSet.zffalse
          return ‚ü®ZFSet.sInter (ZFSet.ùîπ.sep fun (y : ZFSet) => ‚àÉ x ‚àà ùíü, y = ‚Ñô x), .bool, ZFSet.sInter_sep_subset_of_ùîπ_mem_ùîπ Œª _ => id‚ü©
        else failure
      else failure
    else failure

end Denotation

notation "‚ü¶" t "‚üß·¥Æ" => denote t

end B
