import B.Reasoning.Lemmas
import SMT.PHOAS.SMTPHOAS
import SMT.Reasoning.Lemmas
import Encoder.Encoder

open B SMT ZFSet Classical

/--
Translation from B types to SMT types is correct in the sense that the sets
`they represent are isomorphic.
-/
theorem BType_iso_SMTType (Œ± : BType) : ‚ü¶Œ±‚üß·∂ª ‚âÖ·∂ª ‚ü¶Œ±.toSMTType‚üß·∂ª := by
  induction Œ± with
  | int | bool => exact ZFSet.isIso_refl _
  | set Œ± ih =>
    exact ZFSet.isIso_trans ZFSet.isIso_powerset_char_pred
      (ZFSet.isIso_of_funs ih (ZFSet.isIso_refl _))
  | prod _ _ ih ih' => exact ZFSet.isIso_of_prod ih ih'

/--
Canonical isomorphism between `‚ü¶œÑ‚üß·∂ª` and `‚ü¶œÑ.toSMTType‚üß·∂ª`. Bases cases are identities, and
the inductive cases are built using the canonical isomorphisms of the subcomponents inductively.
-/
noncomputable def BType.canonicalIsoSMTType.{u} : (œÑ : BType) ‚Üí {Œ∂ : ZFSet.{u} // ‚àÉ (Œ∂_isfunc : ‚ü¶œÑ‚üß·∂ª.IsFunc ‚ü¶œÑ.toSMTType‚üß·∂ª Œ∂), ZFSet.IsBijective Œ∂}
  | .int =>
    ‚ü®ZFSet.Id Int, Id.IsFunc, Id.IsBijective‚ü©
  | .bool =>
    ‚ü®ZFSet.Id ùîπ, Id.IsFunc, Id.IsBijective‚ü©
  | .set Œ± =>
    let ‚ü®Œ∂, Œ∂_def‚ü© := canonicalIsoSMTType Œ±
    let Œ∂_isfunc := Œ∂_def.1
    let Œ∂_bij := Œ∂_def.2
    let Œæ : ZFSet :=
      Œª·∂ª: ‚ü¶Œ±‚üß·∂ª.powerset ‚Üí (‚ü¶(Œ±.toSMTType)‚üß·∂ª.funs ùîπ)
        |             X ‚Ü¶ if hX : X ‚àà ‚ü¶Œ±‚üß·∂ª.powerset then
                            Œª·∂ª: ‚ü¶(Œ±.toSMTType)‚üß·∂ª ‚Üí ùîπ
                              |               x  ‚Ü¶ if hx : x ‚àà ‚ü¶Œ±.toSMTType‚üß·∂ª then
                                                    let Œ∂invx : ZFSet := @·∂ªŒ∂‚Åª¬π ‚ü®x, by
                                                      rwa [is_func_dom_eq (inv_is_func_of_bijective Œ∂_bij)]‚ü© -- Œ∂‚Åª¬π(x) ‚àà ‚ü¶Œ±‚üß·∂ª
                                                    ZFBool.ofBool <| Œ∂invx ‚àà X
                                                  else ‚àÖ
                          else ‚àÖ
    have hŒæ : ‚ü¶Œ±‚üß·∂ª.powerset.IsFunc (‚ü¶(Œ±.toSMTType)‚üß·∂ª.funs ùîπ) Œæ := by
      apply lambda_isFunc
      intro x hx
      rw [mem_funs, dite_cond_eq_true (eq_true hx)]
      and_intros
      ¬∑ intro z hz
        rw [mem_lambda] at hz
        obtain ‚ü®a, b, rfl, ha, hb, rfl‚ü© := hz
        rw [dite_cond_eq_true (eq_true ha)] at hb ‚ä¢
        rw [pair_mem_prod]
        exact ‚ü®ha, hb‚ü©
      ¬∑ intro z hz
        let Œ∂invz : ZFSet := @·∂ªŒ∂‚Åª¬π ‚ü®z, by rwa [is_func_dom_eq (inv_is_func_of_bijective Œ∂_bij)]‚ü©
        simp_rw [lambda_spec, dite_cond_eq_true (eq_true hz)]
        use ZFBool.ofBool <| Œ∂invz ‚àà x
        beta_reduce
        and_intros
        ¬∑ exact hz
        ¬∑ apply ZFBool.mem_ofBool_ùîπ
        ¬∑ rfl
        ¬∑ rintro y ‚ü®-, hy, rfl‚ü©
          rfl
    have Œæ_bij : Œæ.IsBijective := by
      and_intros
      ¬∑ intro x y f hx hy hf xf yf
        simp only [mem_powerset, mem_lambda, pair_inj, mem_funs, existsAndEq, and_true, exists_eq_left', Œæ] at hx hy hf xf yf
        obtain ‚ü®-, f_isfunc, rfl‚ü© := xf
        obtain ‚ü®-, _, eq‚ü© := yf
        rw [dite_cond_eq_true (eq_true hx)] at f_isfunc eq
        rw [dite_cond_eq_true (eq_true hy), lambda_ext_iff (fun h ‚Ü¶ by rw [dite_cond_eq_true (eq_true h)]; apply ZFBool.mem_ofBool_ùîπ)] at eq

        ext1 z
        constructor <;> intro hz
        ¬∑ let Œ∂z : ZFSet := @·∂ªŒ∂ ‚ü®z, by rw [is_func_dom_eq Œ∂_isfunc]; exact hx hz‚ü©
          specialize eq Œ∂z (fapply_mem_range _ _)
          iterate 2 rw [dite_cond_eq_true (eq_true (fapply_mem_range _ _))] at eq
          rw [‚ÜêSubtype.ext_iff] at eq
          conv at eq =>
            enter [1,1]
            rw [‚Üêfapply_composition (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc (hx hz),
              fapply_eq_Image_singleton (IsFunc_of_composition_IsFunc (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc) (hx hz)]
            conv =>
              enter [1,2,1,1]
              change Œ∂‚Åª¬π ‚àò·∂ª Œ∂
              rw [composition_self_inv_of_bijective Œ∂_bij]
            rw [‚Üêfapply_eq_Image_singleton Id.IsFunc (hx hz),
              fapply_Id (hx hz)]
            dsimp
            rw [eq_true hz, decide_true]
          conv at eq =>
            enter [2,1]
            rw [‚Üêfapply_composition (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc (hx hz),
              fapply_eq_Image_singleton (IsFunc_of_composition_IsFunc (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc) (hx hz)]
            conv =>
              enter [1,2,1,1]
              change Œ∂‚Åª¬π ‚àò·∂ª Œ∂
              rw [composition_self_inv_of_bijective Œ∂_bij]
            rw [‚Üêfapply_eq_Image_singleton Id.IsFunc (hx hz),
              fapply_Id (hx hz)]
            dsimp
          symm at eq
          rwa [ZFBool.ofBool, ‚ÜêZFBool.true, ‚ÜêZFBool.top_eq_true, ZFBool.ofBool_decide_eq_true_iff] at eq
        ¬∑ let Œ∂z : ZFSet := @·∂ªŒ∂ ‚ü®z, by rw [is_func_dom_eq Œ∂_isfunc]; exact hy hz‚ü©
          specialize eq Œ∂z (fapply_mem_range _ _)
          iterate 2 rw [dite_cond_eq_true (eq_true (fapply_mem_range _ _))] at eq
          rw [‚ÜêSubtype.ext_iff] at eq
          conv at eq =>
            enter [1,1]
            rw [‚Üêfapply_composition (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc (hy hz),
              fapply_eq_Image_singleton (IsFunc_of_composition_IsFunc (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc) (hy hz)]
            conv =>
              enter [1,2,1,1]
              change Œ∂‚Åª¬π ‚àò·∂ª Œ∂
              rw [composition_self_inv_of_bijective Œ∂_bij]
            rw [‚Üêfapply_eq_Image_singleton Id.IsFunc (hy hz),
              fapply_Id (hy hz)]
            dsimp
          conv at eq =>
            enter [2,1]
            rw [‚Üêfapply_composition (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc (hy hz),
              fapply_eq_Image_singleton (IsFunc_of_composition_IsFunc (inv_is_func_of_bijective Œ∂_bij) Œ∂_isfunc) (hy hz)]
            conv =>
              enter [1,2,1,1]
              change Œ∂‚Åª¬π ‚àò·∂ª Œ∂
              rw [composition_self_inv_of_bijective Œ∂_bij]
            rw [‚Üêfapply_eq_Image_singleton Id.IsFunc (hy hz),
              fapply_Id (hy hz)]
            dsimp
            rw [eq_true hz, decide_true]
          rwa [ZFBool.ofBool, ‚ÜêZFBool.true, ‚ÜêZFBool.top_eq_true, ZFBool.ofBool_decide_eq_true_iff] at eq
      ¬∑ intro f hf
        rw [mem_funs] at hf
        let X : ZFSet := (‚ü¶Œ±‚üß·∂ª).sep fun x ‚Ü¶
          if hx : x ‚àà ‚ü¶Œ±‚üß·∂ª then
            let Œ∂x : ZFSet := @·∂ªŒ∂ ‚ü®x, by rwa [is_func_dom_eq Œ∂_isfunc]‚ü©
            -- fapply f ‚ü®x, hx'‚ü© = ‚ä§
            let fŒ∂x := @·∂ªf ‚ü®Œ∂x, by
              rw [is_func_dom_eq hf]
              apply fapply_mem_range‚ü©
            fŒ∂x = zftrue
          else False
        use X
        and_intros
        ¬∑ rw [mem_powerset]
          exact sep_subset_self
        ¬∑ rw [lambda_spec]
          and_intros
          ¬∑ rw [mem_powerset]
            exact sep_subset_self
          ¬∑ rwa [mem_funs]
          ¬∑ rw [dite_cond_eq_true (eq_true (by rw [mem_powerset]; exact sep_subset_self)),
              lambda_eta hf,
              lambda_ext_iff (fun h ‚Ü¶ by rw [dite_cond_eq_true (eq_true h)]; apply fapply_mem_range)]
            intro w hw
            iterate 2 rw [dite_cond_eq_true (eq_true hw)]
            dsimp
            set fw : ZFBool := @·∂ªf ‚ü®w, by rwa [is_func_dom_eq hf]‚ü©
            cases hfw : fw with
            | false =>
              symm
              rw [‚ÜêSubtype.ext_iff, ZFBool.ofBool_decide_eq_false_iff]
              intro contr
              rw [mem_sep, dite_cond_eq_true (eq_true (fapply_mem_range _ _))] at contr
              dsimp at contr
              obtain ‚ü®-, contr‚ü© := contr
              conv at contr =>
                enter [1,1]
                unfold fapply
                dsimp
              dsimp at contr
              generalize_proofs Œ∂rel wa_Œ∂inv aa'Œ∂ a'bf at contr
              have ‚ü®a_mem, a_def‚ü© := Classical.choose_spec wa_Œ∂inv
              have ‚ü®a'_mem, a'_def‚ü© := Classical.choose_spec aa'Œ∂
              have ‚ü®b_mem, b_def‚ü© := Classical.choose_spec a'bf
              set! a := Classical.choose wa_Œ∂inv with a_eq
              set! a' := Classical.choose aa'Œ∂ with a'_eq
              set! b := Classical.choose a'bf with b_eq
              rw [‚Üêa_eq, mem_inv] at a_def
              have w_eq := fapply.of_pair (is_func_is_pfunc Œ∂_isfunc) a_def
              simp only [Subtype.ext_iff] at w_eq

              conv at a'_def =>
                rw [‚Üêa'_eq, ‚Üêa_eq, ‚Üêmem_inv Œ∂rel]
              have Œ∂inva'_eq_a := fapply.of_pair (is_func_is_pfunc (inv_is_func_of_bijective Œ∂_bij)) a'_def
              simp only [Subtype.ext_iff] at Œ∂inva'_eq_a
              conv at b_def =>
                enter [2]
                conv =>
                  lhs
                  rw [‚Üêa'_eq]
                conv =>
                  rhs
                  rw [‚Üêb_eq]
              conv at w_eq =>
                simp only [‚ÜêŒ∂inva'_eq_a]
                rw [‚Üêfapply_composition Œ∂_isfunc (inv_is_func_of_bijective Œ∂_bij) a'_mem]
                unfold fapply
                dsimp
              generalize_proofs _ ha at w_eq
              have ‚ü®a_mem, ha‚ü© := Classical.choose_spec ha
              conv at ha =>
                conv =>
                  enter [1]
                  rw [composition_inv_self_of_bijective Œ∂_bij]
                rw [pair_mem_Id_iff a'_mem, w_eq, ‚Üêa'_eq]
              rw [‚Üêb_eq] at contr
              rw [ha, contr] at b_def
              have := fapply.of_pair (is_func_is_pfunc hf) b_def
              unfold fw at hfw
              rw [this, ZFBool.bot_eq_false, ZFBool.false, Subtype.ext_iff] at hfw
              nomatch zftrue_ne_zffalse hfw
            | true =>
              symm
              rw [‚ÜêSubtype.ext_iff, ZFBool.ofBool_decide_eq_true_iff]
              rw [mem_sep, dite_cond_eq_true (eq_true (fapply_mem_range _ _))]
              dsimp
              and_intros
              ¬∑ apply fapply_mem_range
              ¬∑ conv =>
                  enter [1,1]
                  unfold fapply
                  dsimp
                dsimp
                generalize_proofs Œ∂rel wa_Œ∂inv aa'Œ∂ a'bf
                have ‚ü®a_mem, a_def‚ü© := Classical.choose_spec wa_Œ∂inv
                have ‚ü®a'_mem, a'_def‚ü© := Classical.choose_spec aa'Œ∂
                have ‚ü®b_mem, b_def‚ü© := Classical.choose_spec a'bf
                set b := Classical.choose a'bf
                set! a' := Classical.choose aa'Œ∂ with a'_eq
                set! a := Classical.choose wa_Œ∂inv with a_eq
                rw [‚Üêa_eq] at a_def
                rw [‚Üêa'_eq] at b_def
                conv at a'_def =>
                  enter [2]
                  conv => lhs; rw [‚Üêa_eq]
                  conv => rhs; rw [‚Üêa'_eq]
                have w_eq_a' : w = a' := by
                  rw [mem_inv] at a_def
                  apply Œ∂_isfunc.2 a a_mem |>.unique a_def a'_def
                have := fapply.of_pair (is_func_is_pfunc hf) b_def
                unfold fw at hfw
                simp only [‚Üêw_eq_a', Subtype.ext_iff, hfw] at this
                exact this.symm
    ‚ü®Œæ, hŒæ, Œæ_bij‚ü©
  | .prod Œ± Œ≤ =>
    let ‚ü®Œ∂, Œ∂_def‚ü© := canonicalIsoSMTType Œ±
    let Œ∂_isfunc := Œ∂_def.1
    let Œ∂_bij := Œ∂_def.2
    let ‚ü®Œæ, Œæ_def‚ü© := canonicalIsoSMTType Œ≤
    let Œæ_isfunc := Œæ_def.1
    let Œæ_bij := Œæ_def.2

    let Œ∂_Œæ := fprod Œ∂ Œæ
    have Œ∂_Œæ_isfunc := fprod_is_func Œ∂_isfunc Œæ_isfunc
    have Œ∂_Œæ_bij := fprod_bijective_of_bijective Œ∂_bij Œæ_bij
    ‚ü®Œ∂_Œæ, Œ∂_Œæ_isfunc, Œ∂_Œæ_bij‚ü©

/--
Retraction from `‚ü¶œÑ.toSMTType‚üß·∂ª` to `‚ü¶œÑ‚üß·∂ª`. Bases cases are identities, and the inductive cases are
built using the retractions of the subcomponents inductively.

**NOTE:** nothing is enforced on the set passed as argument to reduce the complexity of the definition.
-/
noncomputable def retract : (œÑ : BType) ‚Üí ZFSet ‚Üí ZFSet
| .int | .bool => id
| .prod Œ± Œ≤ => fun u ‚Ü¶
  let u‚ÇÅ := u.œÄ‚ÇÅ
  let u‚ÇÇ := u.œÄ‚ÇÇ
  (retract Œ± u‚ÇÅ).pair (retract Œ≤ u‚ÇÇ)
| .set Œ± => fun f ‚Ü¶
  let ‚ü®Œ∂, hŒ∂‚ü© := BType.canonicalIsoSMTType Œ±
  let Œ∂_isfunc := hŒ∂.1
  let Œ∂_bij := hŒ∂.2

  (‚ü¶Œ±‚üß·∂ª).sep fun x ‚Ü¶
    if hx : x ‚àà ‚ü¶Œ±‚üß·∂ª then
      let Œ∂x : ZFSet := @·∂ªŒ∂ ‚ü®x, by rwa [ZFSet.is_func_dom_eq Œ∂_isfunc]‚ü©
      if hf : ‚ü¶Œ±.toSMTType‚üß·∂ª.IsFunc ùîπ f then
        -- fapply f ‚ü®x, hx'‚ü© = ‚ä§
        let fx := @·∂ªf ‚ü®Œ∂x, by
          rw [is_func_dom_eq hf]
          apply fapply_mem_range‚ü©
        fx = zftrue
      else False
    else False

/--
`retract` is a left inverse for the corresponding canonical isomorphism, i.e.
`Œ∑_œÑ ‚àò Œ∂_œÑ = id` where `Œ∂_œÑ` is the canonical isomorphism between `‚ü¶œÑ‚üß·∂ª` and `‚ü¶œÑ.toSMTType‚üß·∂ª`,
and `Œ∑` is the retraction from `‚ü¶œÑ.toSMTType‚üß·∂ª` to `‚ü¶œÑ‚üß·∂ª`.
-/
@[simp]
theorem retract_of_canonical.{u} {x : ZFSet.{u}} (œÑ : BType) (hx : x ‚àà ‚ü¶œÑ‚üß·∂ª) {Œ∂}
  (hŒ∂ : Œ∂ = BType.canonicalIsoSMTType œÑ := by rfl) :
    retract œÑ (fapply Œ∂ (is_func_is_pfunc Œ∂.2.1) ‚ü®x, by rwa [ZFSet.is_func_dom_eq Œ∂.2.1]‚ü©) = x := by
  -- preprocess proof
  obtain ‚ü®Œ∂, Œ∂_isfunc, Œ∂_bij‚ü© := Œ∂
  rw [Subtype.ext_iff] at hŒ∂
  dsimp at hŒ∂

  induction œÑ generalizing Œ∂ x with
  | int | bool =>
    rw [BType.canonicalIsoSMTType] at hŒ∂
    subst Œ∂
    rw [retract, fapply_Id (by exact hx)]
    rfl
  | set Œ± =>
    rename' x => X -- readability

    rw [BType.canonicalIsoSMTType] at hŒ∂
    dsimp at hŒ∂
    -- subst Œ∂

    rw [retract]
    dsimp
    generalize_proofs Œ∂_ispfunc _ X_mem_dom Œ∂X_is_pfunc_of_is_func Œ∂_Œ±_is_pfunc Œ∂_Œ±_dom app_Œ∂_Œ±_dom
    let Œ∂_Œ± : ZFSet := (BType.canonicalIsoSMTType Œ±).1
    have Œ∂_Œ±_is_func := (BType.canonicalIsoSMTType Œ±).2.1
    have Œ∂_Œ±_bij := (BType.canonicalIsoSMTType Œ±).2.2
    have Œ∂_Œ±_inv := ZFSet.subset_prod_inv Œ∂_Œ±_is_func.1
    refold_let Œ∂_Œ± at *

    have Œ∂_restr : (@·∂ªŒ∂ ‚ü®X, X_mem_dom‚ü©).val =
        Œª·∂ª: ‚ü¶Œ±.toSMTType‚üß·∂ª ‚Üí ùîπ
          |             z  ‚Ü¶ if hx : z ‚àà ‚ü¶Œ±.toSMTType‚üß·∂ª then
                              ZFBool.ofBool (decide (‚Üë(@·∂ªŒ∂_Œ±‚Åª¬π ‚ü®z, by rwa [is_func_dom_eq (inv_is_func_of_bijective Œ∂_Œ±_bij)]‚ü©) ‚àà X))
                            else ‚àÖ
        := by
      subst Œ∂
      rw [BType.toZFSet] at hx
      rw [fapply_lambda (B := ‚ü¶Œ±.toSMTType‚üß·∂ª.funs ùîπ) ?_ hx, ite_cond_eq_true _ _ (eq_true hx)]

      intro _ h
      rw [ite_cond_eq_true _ _ (eq_true h)]
      apply mem_funs_of_lambda
      intro x hx
      rw [dite_cond_eq_true (eq_true hx)]
      apply ZFBool.mem_ofBool_ùîπ

    ext1 z
    constructor <;> intro hz
    ¬∑ rw [mem_sep] at hz
      obtain ‚ü®hz, eq‚ü© := hz
      rw [dite_cond_eq_true (eq_true hz), dite_cond_eq_true (eq_true (by rw [‚Üêmem_funs]; apply fapply_mem_range))] at eq
      generalize_proofs Œ∂X_is_pfunc z_mem_dom app_z_mem_dom at eq

      let Œ∂_Œ±_z : ZFSet := @·∂ªŒ∂_Œ± ‚ü®z, by rwa [is_func_dom_eq Œ∂_Œ±_is_func]‚ü©
      have := @fapply_lambda ‚ü¶Œ±.toSMTType‚üß·∂ª ùîπ
        (fun z ‚Ü¶ if hx : z ‚àà ‚ü¶Œ±.toSMTType‚üß·∂ª then
                  ZFBool.ofBool (decide (‚Üë(@·∂ªŒ∂_Œ±‚Åª¬π ‚ü®z, by rwa [is_func_dom_eq (inv_is_func_of_bijective Œ∂_Œ±_bij)]‚ü©) ‚àà X))
                else ‚àÖ)
        ?_ Œ∂_Œ±_z (fapply_mem_range _ _)

      ¬∑ rw [dite_cond_eq_true (eq_true (fapply_mem_range _ _))] at this
        rw [fapply_eq_Image_singleton
          (lambda_isFunc fun hx ‚Ü¶ by rw [dite_cond_eq_true (eq_true hx)]; apply ZFBool.mem_ofBool_ùîπ)
          (fapply_mem_range _ _)] at this
        ¬∑ conv at this =>
            enter [1,1,1]
            rw [‚ÜêŒ∂_restr]
          rw [‚Üêfapply_eq_Image_singleton (by rw [‚Üêmem_funs]; apply fapply_mem_range) (fapply_mem_range _ _),
            eq, eq_comm, (by rfl : zftrue = ‚Üë(‚ä§ : ZFBool)), ‚ÜêSubtype.ext_iff, ZFBool.ofBool_decide_eq_true_iff,
            ‚Üêfapply_composition (inv_is_func_of_bijective Œ∂_Œ±_bij) Œ∂_Œ±_is_func hz,
            fapply_eq_Image_singleton (IsFunc_of_composition_IsFunc (inv_is_func_of_bijective Œ∂_Œ±_bij) Œ∂_Œ±_is_func) hz] at this
          conv at this =>
            enter [2,1,1]
            change Œ∂_Œ±‚Åª¬π ‚àò·∂ª Œ∂_Œ±
            rw [composition_self_inv_of_bijective Œ∂_Œ±_bij]
          rwa [‚Üêfapply_eq_Image_singleton Id.IsFunc hz, fapply_Id hz] at this
      ¬∑ intro x hx
        beta_reduce
        rw [dite_cond_eq_true (eq_true hx)]
        apply ZFBool.mem_ofBool_ùîπ
    ¬∑ rw [mem_sep]
      rw [BType.toZFSet, mem_powerset] at hx
      and_intros
      ¬∑ exact hx hz
      ¬∑ rw [dite_cond_eq_true (eq_true <| hx hz), dite_cond_eq_true (eq_true (by rw [‚Üêmem_funs]; apply fapply_mem_range))]
        generalize_proofs Œ∂X_is_pfunc z_mem_dom app_z_mem_dom
        subst Œ∂
        conv =>
          enter [1]
          rw [fapply_eq_Image_singleton (by rw [‚Üêmem_funs]; apply fapply_mem_range) (fapply_mem_range _ _)]
          conv =>
            enter [1,1]
            rw [fapply_lambda (B := (‚ü¶Œ±.toSMTType‚üß·∂ª.funs ùîπ)) (by
              intro x hx
              rw [ite_cond_eq_true _ _ (eq_true hx)]
              apply mem_funs_of_lambda
              intro x hx
              rw [dite_cond_eq_true (eq_true hx)]
              apply ZFBool.mem_ofBool_ùîπ
            ) (by rwa [mem_powerset]), mem_powerset, ite_cond_eq_true _ _ (eq_true hx)]
          rw [‚Üêfapply_eq_Image_singleton
            (lambda_isFunc fun hx ‚Ü¶ by rw [dite_cond_eq_true (eq_true hx)]; apply ZFBool.mem_ofBool_ùîπ)
            (fapply_mem_range _ _),
            fapply_lambda (fun hx ‚Ü¶ by rw [dite_cond_eq_true (eq_true hx)]; apply ZFBool.mem_ofBool_ùîπ) (fapply_mem_range _ _),
            dite_cond_eq_true (eq_true (fapply_mem_range _ _))]
        rw [(by rfl : zftrue = ‚Üë(‚ä§ : ZFBool)), ‚ÜêSubtype.ext_iff, ZFBool.ofBool_decide_eq_true_iff,
          ‚Üêfapply_composition (inv_is_func_of_bijective Œ∂_Œ±_bij) Œ∂_Œ±_is_func (hx hz),
          fapply_eq_Image_singleton (IsFunc_of_composition_IsFunc (inv_is_func_of_bijective Œ∂_Œ±_bij) Œ∂_Œ±_is_func) (hx hz)]
        conv =>
          enter [2,1,1]
          change Œ∂_Œ±‚Åª¬π ‚àò·∂ª Œ∂_Œ±
          rw [composition_self_inv_of_bijective Œ∂_Œ±_bij]
        rwa [‚Üêfapply_eq_Image_singleton Id.IsFunc (hx hz), fapply_Id (hx hz)]
  | prod Œ± Œ≤ Œ±_ih Œ≤_ih =>
    rw [BType.toZFSet, mem_prod] at hx
    obtain ‚ü®a, ha, b, hb, rfl‚ü© := hx

    rw [BType.canonicalIsoSMTType] at hŒ∂
    dsimp at hŒ∂
    subst Œ∂

    let Œ∂_Œ± : ZFSet.{u} := (BType.canonicalIsoSMTType Œ±).1
    let Œ∂_Œ≤ : ZFSet.{u} := (BType.canonicalIsoSMTType Œ≤).1
    let Œ∂_Œ±_isfunc := (BType.canonicalIsoSMTType Œ±).2.1
    let Œ∂_Œ≤_isfunc := (BType.canonicalIsoSMTType Œ≤).2.1
    let Œ∂_Œ±_bij := (BType.canonicalIsoSMTType Œ±).2.2
    let Œ∂_Œ≤_bij := (BType.canonicalIsoSMTType Œ≤).2.2

    rw [retract, pair_inj]
    and_intros
    ¬∑ conv =>
        enter [1,2,1]
        rw [fapply_fprod Œ∂_Œ±_isfunc Œ∂_Œ≤_isfunc ha hb]
      rw [œÄ‚ÇÅ_pair, Œ±_ih ha _ Œ∂_Œ±_isfunc Œ∂_Œ±_bij]
      rfl
    ¬∑ conv =>
        enter [1,2,1]
        rw [fapply_fprod Œ∂_Œ±_isfunc Œ∂_Œ≤_isfunc ha hb]
      rw [œÄ‚ÇÇ_pair, Œ≤_ih hb _ Œ∂_Œ≤_isfunc Œ∂_Œ≤_bij]
      rfl

/--
Another version of `retract_of_canonical` but stated as composition explicitly.
-/
theorem retract_composition_canonicalIso (œÑ : BType) :
  composition
    (Œª·∂ª : ‚ü¶œÑ.toSMTType‚üß·∂ª ‚Üí ‚ü¶œÑ‚üß·∂ª | z ‚Ü¶ retract œÑ z)
    (BType.canonicalIsoSMTType œÑ).1 ‚ü¶œÑ‚üß·∂ª ‚ü¶œÑ.toSMTType‚üß·∂ª ‚ü¶œÑ‚üß·∂ª = ZFSet.Id ‚ü¶œÑ‚üß·∂ª := by
  ext1 x
  constructor <;> intro hx
  ¬∑ rw [ZFSet.mem_Id_iff]
    rw [mem_composition] at hx
    obtain ‚ü®x, z, y, rfl, hx, hy, hz, xz, zy‚ü© := hx
    rw [lambda_spec] at zy
    obtain ‚ü®-, -, y_eq‚ü© := zy

    set Œ∂_œÑ := (BType.canonicalIsoSMTType œÑ).1
    have Œ∂_œÑ_isfunc := (BType.canonicalIsoSMTType œÑ).2.1

    have Œ∂x_eq := fapply.of_pair (is_func_is_pfunc Œ∂_œÑ_isfunc) xz
    rw [Subtype.ext_iff] at Œ∂x_eq
    dsimp at Œ∂x_eq
    rw [‚ÜêŒ∂x_eq, retract_of_canonical œÑ hx] at y_eq
    subst y
    use x, hx
  ¬∑ rw [ZFSet.mem_Id_iff] at hx
    obtain ‚ü®x, hx, rfl‚ü© := hx

    rw [mem_composition]
    simp only [pair_inj, existsAndEq, and_true, exists_and_left, exists_eq_left', and_self_left]
    apply And.intro hx

    set Œ∂_œÑ := (BType.canonicalIsoSMTType œÑ).1
    have Œ∂_œÑ_isfunc := (BType.canonicalIsoSMTType œÑ).2.1

    use @·∂ªŒ∂_œÑ ‚ü®x, by rwa [is_func_dom_eq Œ∂_œÑ_isfunc]‚ü©
    and_intros
    ¬∑ apply fapply_mem_range
    ¬∑ apply fapply.def
    ¬∑ rw [lambda_spec]
      and_intros
      ¬∑ apply fapply_mem_range
      ¬∑ exact hx
      ¬∑ rw [retract_of_canonical œÑ hx]

/--
Relation RDom via retraction :
`‚ü®X, œÑ, _‚ü©` and `‚ü®X', œÑ', _‚ü©` are related in `RDom` iff `œÑ' = œÑ.toSMTType` and `Œ∑_œÑ X' = X`.
-/
def RDom : B.Dom ‚Üí SMT.Dom ‚Üí Prop :=
  fun ‚ü®X, œÑ, _‚ü© ‚ü®X', œÑ', _‚ü© ‚Ü¶ œÑ' = œÑ.toSMTType ‚àß retract œÑ X' = X

infix:50 " ‚âò·∂ª " => RDom

def RValuation (Œû : B.ùí± ‚Üí Option B.Dom) (Œò : SMT.ùí± ‚Üí Option SMT.Dom) : Prop := ‚àÄ v,
  match Œû v, Œò v with
  | none, none => True
  | some d, some d' => d ‚âò·∂ª d'
  | _, _ => False


-- theorem BType_iso_prod_of_iso {Œ± Œ≤ : BType} : ‚ü¶Œ±‚üß·∂ª.funs ‚ü¶Œ≤‚üß·∂ª ‚âÖ·∂ª ‚ü¶Œ±.toSMTType‚üß·∂ª.funs ‚ü¶Œ≤.toSMTType‚üß·∂ª := by
--   have ‚ü®Œ∂, Œ∂_isfunc, Œ∂_bij‚ü© := BType_iso_SMTType Œ±
--   have ‚ü®Œæ, Œæ_isfunc, Œæ_bij‚ü© := BType_iso_SMTType Œ≤
--   obtain ‚ü®Œ¶_isfunc, Œ¶_bij‚ü© := ZFSet.composition_fprod_Image_bijective (A := ‚ü¶Œ±‚üß·∂ª) (B := ‚ü¶Œ≤‚üß·∂ª) (œÜ_bij := Œ∂_bij) (œà_bij := Œæ_bij)
--   exists ?_
--   admit

/--
Given a renaming context for B variables `Œî : B.ùí± ‚Üí Option B.Dom`, a renaming context for SMT
variables can be constructed isomorphically, so that variables themselves are mapped to isomorphic
sets. Such a functor is said to be *fully faithful*.

`Œî.toSMT` is therefore constructed as bijection up to isomorphism, first proving that
`(B.ùí± ‚Üí Option B.Dom) ‚âÖ (SMT.ùí± ‚Üí Option SMT.Dom)` and second that for any variable
`‚àÄ v : ùí±, (Œî v) ‚âÖ (Œî.toSMT v)`.
-/
noncomputable def B.RenamingContext.toSMT.{u} (¬´Œî¬ª : B.ùí± ‚Üí Option B.Dom.{u}) (v : SMT.ùí±) : Option SMT.Dom.{u} := do
  let ‚ü®V, œÑ, pf‚ü© ‚Üê ¬´Œî¬ª v
  let Œ∂_œÑ : ZFSet.{u} := (BType.canonicalIsoSMTType œÑ).1
  let Œ∂_œÑ_isfunc : (‚ü¶œÑ‚üß·∂ª).IsFunc (‚ü¶œÑ.toSMTType‚üß·∂ª) Œ∂_œÑ := (BType.canonicalIsoSMTType œÑ).2.1
  let Œ∂_œÑ_bij : IsBijective Œ∂_œÑ Œ∂_œÑ_isfunc := (BType.canonicalIsoSMTType œÑ).2.2

  let V' : ZFSet := @·∂ªŒ∂_œÑ ‚ü®V, by rwa [ZFSet.is_func_dom_eq Œ∂_œÑ_isfunc]‚ü©
  return ‚ü®V', œÑ.toSMTType, fapply_mem_range _ _‚ü©

/-- `RenamingContext.toSMT` preserves `RValuation` pointwise. -/
theorem RValuation_toSMT (Œû : B.ùí± ‚Üí Option B.Dom) :
    RValuation Œû (B.RenamingContext.toSMT Œû) := by
  intro v
  cases hŒûv : Œû v with
  | none =>
    rw [RenamingContext.toSMT, Option.pure_def, Option.bind_eq_bind, hŒûv, Option.bind_none]
    trivial
  | some d =>
    let ‚ü®V, œÑ, hV‚ü© := d
    rw [RenamingContext.toSMT, Option.pure_def, Option.bind_eq_bind, hŒûv, Option.bind_some]
    dsimp
    rw [RDom]
    apply And.intro rfl
    rw [retract_of_canonical œÑ hV]
