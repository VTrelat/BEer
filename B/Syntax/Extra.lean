import B.Syntax.Basic
import Extra.Prettifier
import Extra.GetOption

namespace B

-- Disjunction
@[match_pattern]
def Term.or (x y : Term) := ¬¨·¥Æ ((¬¨·¥Æ x) ‚àß·¥Æ (¬¨·¥Æ y))
infixl:40 " ‚à®·¥Æ " => Term.or

-- Implication
@[match_pattern]
def Term.imp (x y : Term) := (¬¨·¥Æ x) ‚à®·¥Æ y
infixr:20 " ‚áí·¥Æ " => Term.imp
-- Equivalence
@[match_pattern]
def Term.iff (x y : Term) := (x ‚áí·¥Æ y) ‚àß·¥Æ (y ‚áí·¥Æ x)
infixr:20 " ‚áî·¥Æ " => Term.iff
@[match_pattern]
def Term.neq (x y : Term) := ¬¨·¥Æ (x =·¥Æ y)
infixl:40 " ‚â†·¥Æ " => Term.neq

def Term.nexp (x : Term) : Nat ‚Üí Term
  | 0 => .int 1
  | 1 => x
  | n + 1 => .mul x (Term.nexp x n)

def Term.exp (x : Term) (n : Int) : Term :=
  if npos : n < 0 then
    let m := n.toNat
    if m % 2 = 0 then Term.nexp x m else .int (-1) *·¥Æ Term.nexp x m
  else Term.nexp x (n.toNat?.get (by
    rw [Int.not_gt_eq] at npos
    cases n
    ¬∑ rfl
    ¬∑ nomatch (Int.negSucc_not_nonneg _).mp npos))
infixl:200 "^·¥Æ" => Term.exp

-- Existential
@[match_pattern]
def Term.exists (v : List ùí±) (D P : Term) := ¬¨·¥Æ (.all v D (¬¨·¥Æ P))

-- Binary relation
@[match_pattern]
def Term.brel (x y : Term) := (x ‚®Ø·¥Æ y) ‚á∏·¥Æ .ùîπ

abbrev Term.MAXINT : Term := .int 2147483647
abbrev Term.MININT : Term := .int (-2147483647)
abbrev ùí±.isReserved (v : ùí±) : Bool := v ‚àà ["NATURAL", "NAT", "NAT1", "INT", "INTEGER", "BOOL"]

partial def Term.pretty (b : Bool) : Term -> Nat -> Std.Format
  | .var v => Œª _ => (bif b then if v.isReserved then RED else GREEN else id) v
  | .int n => Œª _ => (bif b then BLUE else id) <| toString n
  | .bool x => Œª _ => (bif b then BLUE else id) <| toString x
  | .‚Ñ§ => Œª _ => (bif b then RED else id) "‚Ñ§"
  | .ùîπ => Œª _ => (bif b then RED else id) "ùîπ"
  | .imp x y => ¬´infixr¬ª (Term.pretty b) 30 "‚áí·¥Æ" x y -- /!\ see manrefb p.198
  | .or x y => ¬´infixl¬ª (Term.pretty b) 40 "‚à®·¥Æ" x y
  | .and x y => ¬´infixl¬ª (Term.pretty b) 40 "‚àß·¥Æ" x y
  | .eq x y => ¬´infix¬ª (Term.pretty b) 40 "=·¥Æ" x y
  | .mem x S => ¬´infixl¬ª (Term.pretty b) 120 "‚àà·¥Æ" x S
  | .brel x y => ¬´infix¬ª (Term.pretty b) 125 "‚Üî" x y
  | .pfun A B => ¬´infixr¬ª (Term.pretty b) 125 "‚á∏·¥Æ" A B
  | .neq x y => ¬´infix¬ª (Term.pretty b) 160 "‚â†·¥Æ" x y
  | .le x y => ¬´infixl¬ª (Term.pretty b) 160 "‚â§·¥Æ" x y
  | .inter x y => ¬´infixl¬ª (Term.pretty b) 160 "‚à©·¥Æ" x y
  | .union x y => ¬´infixl¬ª (Term.pretty b) 160 "‚à™·¥Æ" x y
  | .maplet x y => ¬´infixl¬ª (Term.pretty b) 160 "‚Ü¶·¥Æ" x y
  | .add x y => ¬´infixl¬ª (Term.pretty b) 180 "+·¥Æ" x y
  | .sub x y => ¬´infixl¬ª (Term.pretty b) 180 "-·¥Æ" x y
  | .mul x y => ¬´infixl¬ª (Term.pretty b) 190 "*·¥Æ" x y
  | .cprod x y => ¬´infixl¬ª (Term.pretty b) 190 "‚®Ø·¥Æ" x y
  | .exists v D P => binder (Term.pretty b) 250 "‚àÉ·¥Æ " (v.map (bif b then GREEN else id)).toString' " ‚àà·¥Æ " D ". " P ""
  | .not x => ¬´prefix¬ª (Term.pretty b) 250 "¬¨·¥Æ" x
  | .all v D P => binder (Term.pretty b) 0 "‚àÄ·¥Æ " (v.map (bif b then GREEN else id)).toString' " ‚àà·¥Æ " D ". " P ""
  | .collect v D P => binder (Term.pretty b) 250 "{ " (v.map (bif b then GREEN else id)).toString' " ‚àà·¥Æ " D " | " P " }"
  | .lambda v D P => binder (Term.pretty b) 0 "Œª·¥Æ " (v.map (bif b then GREEN else id)).toString' " ‚àà·¥Æ " D ". " P ""
  | .app f x => Œª _ => Term.pretty b f 300 ++ .paren (Term.pretty b x 0)
  | .pow S => ¬´prefix¬ª (Term.pretty b) 290 "ùí´ " S
  | .min S => ¬´prefix¬ª (Term.pretty b) 290 "min " S
  | .max S => ¬´prefix¬ª (Term.pretty b) 290 "min " S
  | .card S => Œª _ => "‚Äñ" ++ Term.pretty b S 0 ++ "‚Äñ·¥Æ"

end B

instance : ToString B.Term := ‚ü®(B.Term.pretty false ¬∑ 0 |> ToString.toString)‚ü©
